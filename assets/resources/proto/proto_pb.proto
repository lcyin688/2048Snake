syntax="proto3";
package pb;

message C2SLogoffAccount
{
     string name = 1;    // 姓名
     string idNum = 2;   // 身份证
}
// 取消注销
message C2SUnLogoffAccount
{
}
message C2SASKAchievData
{
}
message S2CReplyAchiev
{
    repeated AchievData achievs = 1;
}
message C2SAchievReward
{
    int32 id = 1;
}
message S2CAchievReward
{
    int32 id = 1;
    int32 state = 2;
    int32 newStage = 3;
}
message C2SAchievCfg
{
    
}
message S2CAchievCfg
{
    map<int32,AchievCfg> cfg =1;
}
message AchievData
{
    int32 id = 1;
    int32 val = 2;
    int32 state = 3;
}
message AchievCfg
{
    int32 id = 1;
    string title =2;
    repeated Id2Val reward = 3;
    string buttomInfo = 4;
    int32 rewardType = 5;
    int32 targetVal = 6;
}
enum AchievTargetType
{
    AchievTarget_UnDef = 0;
    AchievTarget_PlayCount = 1;
    AchievTarget_ChunTian = 2;
    AchievTarget_FanChun = 3;
    AchievTarget_ZhaDan = 4;
    AchievTarget_LianSheng = 5;
    AchievTarget_Gang = 6;
    AchievTarget_LvyiSe = 7;
    AchievTarget_ShouZhongBaoYi = 8;
    AchievTarget_QuanXiao = 9;
    AchievTarget_QuanZhong = 10;
    AchievTarget_QuanDa = 11;
    AchievTarget_LongQiDui = 12;
    AchievTarget_QuanDaiWu = 13;
    AchievTarget_SiAnke = 14;
    AchievTarget_JiuLianBaoDeng = 15;
    AchievTarget_ShuangLongQiDui = 16;
    AchievTarget_LianQidui = 17;
    AchievTarget_QuanYaoJiu = 18;
    AchievTarget_ShiBaLuoHan = 19;
    AchievTarget_YiSeShuangLongHui = 20;
    AchievTarget_TianHu = 21;
    AchievTarget_DiHu = 22;
    AchievTarget_SanLongQiDui = 23;
    AchievTarget_FeiJi = 24;
    AchievTarget_Mul64More = 25;
}
enum AchievLoop
{
    AchievLoop_UnDef = 0;
    AchievLoop_MeiRi = 1;
    AchievLoop_XunHuan = 2;
}
enum AchievReward
{
    AchievReward_UnDef = 0;
    AchievReward_RandVal = 1;
    AchievReward_Conf = 2;
}
message ActivityInfo
{
	int32 id = 1;
	int32 type = 2;
	string icon = 3;
}
message C2SActivityInfo
{
}
message S2CActivityInfo
{
	repeated ActivityInfo data = 1;
}
message C2SActivityData
{
	 int32 id  = 1;
}
message ActivityData
{
	 int32 id = 1;
	 ActivityCfg cfg = 2;
}
message S2CActivityData
{
	repeated ActivityData data = 1;
}
enum ActOption
{
	ActOpt_Null = 0;
	ActOpt_Free = 1;
	ActOpt_Advert = 2;
	ActOpt_GetReward  = 3;			
}
message C2SDoActivity
{	
	int32 id = 1;
	int32 subId = 2;
	ActOption opType = 3;
}
message S2CDoActivity
{
	int32 ec = 1;
	int32 id = 2;
	ActivityType aType = 3;
	int32 subId = 4; 
	repeated Item reward = 5;
}
enum ActivityType
{
	ActivityType_Null = 0;
	ActivityType_Login = 1;
	ActivityType_Lottery = 2;
}
enum ActivityState
{
	ActivityState_Null = 0;
	ActivityState_Normal = 1;
	ActivityState_Open = 2;
	ActivityState_Close = 3;
}
enum ActCondType
{
	ActCondType_Login = 0;
	ActCondType_PlayWin = 1;
	ActCondType_Pay = 2;
	ActCondType_FinishLogin = 4;
}
message TurntableActCfg
{
	message TableItem{
		int32 id = 2;
		pb.Item reward = 1;
		int32 freeProb = 10;
		int32 advertProb = 11;
	}
	int32 freeTimes = 1;	// 免费次数
	int32 advertTimes = 2;	// 视频次数
	repeated TableItem actItems = 3;	//
}
message LoginActCfg
{
	message LoginActItem
	{
		int32 id = 1;
		string desc = 2;
		ActCondType condType = 3;
		int32 condVal = 4;
		string param = 5;
		string rewardName = 6; 
		repeated pb.Item reward = 10;
	}
	repeated LoginActItem actItems = 1;
	repeated pb.Item reward = 10;
}
message ActivityCfg
{
	int32 id = 1;
	ActivityType type = 2;
	string name	= 3;
	int64 startTime= 5;
	int64 endTime= 6;
	oneof activityCfg {
		TurntableActCfg turnTable = 100;
		LoginActCfg loginCfg = 101;
	}
	string actIcon = 20;
	string actImage = 21;
	ActivityState state = 22;
	int32 cycle	= 8;
}
message C2SGetAdReward
{
	int32 id = 1;
	int32 type = 2;// 1 看视频成功  3.关闭
}
message AdRewardItem
{
	int32 id = 1;
	string btnText = 2;//按钮文字
	string shuoming = 3;//说明
	int64 value =4;//说明参数
	int32 type = 5;// 货币类型
}
enum AdRewardType
{
	AdRewardType_UnDef = 0;
	AdRewardType_0Buy = 1;
	AdRewardType_WinFanBei = 2;
	AdRewardType_MianShu = 3;
	AdRewardType_Achiev = 4;
	AdRewardType_Grade = 5;
	AdRewardType_DuanWei = 6;
	AdRewardType_SaiJi =7;
	AdRewardType_ZhuanPan = 8;
	AdRewardType_QianDao = 9;
	AdRewardType_ShiDuan = 10;
	AdRewardType_GuaJi = 11;
	AdRewardType_PoChan = 12;
	AdRewardType_HuaFei = 13;
	AdRewardType_AdReward = 14;
}
enum AdRewardState
{
	AdRewardState_Close = 0;
	AdRewardState_VideoSucc = 1;
}
message S2CAdCfgs
{
    repeated AdLoopItem items = 1;
}
message AdData
{
     int32 sdkType = 1;
     int32 funcId = 2;
     int32 intParam = 3;
     string strParam = 4;
}
message C2SAdStart
{
     AdData item = 1;
     bool result = 2;
     string code = 3;
}
message C2SAdEnd
{
     AdData item = 1;
     string code = 2;
}
enum AdSdkType
{
    AdSdkType_Null = 0;
    AdSdkType_Ylh = 1;      // 优量汇
    AdSdkType_Pangle = 2;   // Pangle
    AdSdkType_Bqt = 3;      // 百青藤
    AdSdkType_Ks = 4;      // 快手
    AdSdkType_Hw = 5;       // 华为
    AdSdkType_Oppo = 6;     // Oppo
    AdSdkType_XiaoMi = 7;   // 
    AdSdkType_Share = 10;   // 分享类型(非广告)
}
enum AdFuncId
{
    Ad_Null = 0;
    Ad_MatchEnter = 100;        // 房间入口（获取炸弹/红中匹配) 参数：房间配置ID
     
    Ad_NoLose = 110;            // 免输
    Ad_WinMore = 111;           // 赢翻倍    
    Ad_AdReward = 112;          // 看视频(通用获得) 翻倍 参数：S2CShowItems.id()
    Ad_LevelReward = 120;       // 等级   参数：等级ID
    Ad_TaskReward = 121;        // 任务   参数：任务ID
    Ad_RankListReward = 122;    // 排行榜 参数：排行榜类型
    Ad_Lottery = 123;           // 转盘   参数: 活动ID
    Ad_Relief = 124;            // 救济金
    Ad_OnlineReward = 125;      // 在线奖励
    Ad_TimedLogin = 126;        // 定时登录  参数：ID
    Ad_FreeCoin = 127;          // 商城免费金币 参数：商品配置ID
    Ad_FreeProp = 128;          // 商城免费道具 参数：商品配置ID
    Ad_SignIn = 129;            // 签到     intParam：活动ID strParam: subId
    
    Ad_HfExchange = 132;        // 话费兑换
    Ad_PoChanfuhuo = 133;       // 破产复活 参数 ID
    Ad_SeasonReward = 134;      // 赛季奖励
    Ad_DuanweiReward = 135;      // 段位奖励 参数：段位
}
message AdLoopItem
{
     int32 id = 1;
     int32 sdkType = 2;
     int64 startTime = 3;  // 0点开始的秒数
     int64 endTime = 4;    // 0点开始的秒数
}
enum PlayerAttr
{
    PA_Null = 0;                // --
    PA_Gender = 1;              // 性别
    PA_Grade = 2;              // 等级
    PA_Exp = 3;                // 等级经验
    PA_PortBorder = 4;           // 头像框(当前使用)
    PA_AccountType = 5;        // 帐号类型
    PA_TotalPlay = 6;           // 游戏总次数（所有玩法）
    PA_TotalWin = 7;            // 胜利总次数（所有玩法）
    PA_Inviter = 8;             // 上级邀请者
    PA_Birthday = 9;            // 生日
    PA_TrueNameAuth = 10;        // 是否实名认证
    
    PA_HideInfo = 11;            // 隐藏信息 
    PA_ProvId = 12;             // 省
    PA_CityId = 13;             // 市
    PA_DistId = 14;             // 区
    PA_VipLevel = 15;			// VIP等级
    PA_SeasonNum = 20;        // 玩家记录的当前赛季数
    PA_SafeBox = 30;            // 保险箱
    
    PA_TotalAdTimes = 35;       // 累计看广告次数
    PA_TotalInvite = 36;        // 累计邀请人数
    
    PA_ConsumeAdTimes = 37;       // 提现累计消耗看广告次数
    PA_ConsumeInvite = 38;        // 提现累计消耗邀请人数
    PA_Cash = 40;               // 现金额度(分)
    PA_CashShow = 41;           // 现金显示值(话费券转换 + 现金额度)（分）
    PA_BeginnerMoney = 42;      // 新手红包(分)
    PA_TotalWithDraw = 43;      // 累计提现
    PA_TotalPhoneRecharge = 44; // 累计话费充值
    // 积分排行榜 start
    PA_DayAmount = 50;   // 日返还
    PA_WeekAmount = 51;  // 周返还
    PA_MonthAmount = 52; // 月返还
    PA_YearAmount = 53;  // 年返还
    PA_TotalAmount = 54; // 总返还（
    PA_DayScore = 60;      // 今日积分值
    PA_WeekScore = 61;     // 本周积分值
    PA_MonthScore = 62;    // 本月积分值
    PA_YearScore = 63;     // 本年积分值
    PA_VipDayReward = 70;   // VIP日奖励是否领取
    PA_PlayDesk = 75;           // 当前牌桌
    // 积分排行榜 end
    PA_SepVal = 10000;          // 大于的值不同步客户端
    PA_InitPkgType = 10001;     // 初始包类型
    PA_TrueNameAuthRewardGet = 10005; // 是否领取实名认证奖励
    PA_OnLineTime = 10010;		// 玩家在线时间
    PA_PkgType = 10011;         // 登录包类型
    PA_NppaStatus = 10012;      // 版署认证状态
    PA_TotalPay = 10013;        // 总计充值
    PA_LastMailId = 10014;   
    PA_GiveBeginnerMoney = 10015; // 今日是否赠送新手红包
    PA_AiGameCat = 10030;       // 玩法类型
    PA_AiCat = 10031;           // 匹配场1
    PA_AiZnLevel = 10032;       // AI智能等级
    PA_AiGroup = 10033;         // 
    
    PA_MatchTimes = 10034;      // 匹配场游戏次数
    PA_RaceTimes = 10035;       // 比赛场游戏次数
    PA_LastMjCfgId = 10036;     // 最后进入的麻将
	PA_LogoffState = 10037;    // 是否注销状态
}
message Id2Val
{
     int32 key = 1;
     int64 value = 2;
}
message ValRange
{
     int64 first = 1;
     int64 second = 2;
}
message C2SPing
{
}
message S2CPing
{
}
enum CfgType
{
     CfgType_Null = 0;
     CfgType_SafeBoxStep = 1;       // 保箱险步长
     CfgType_SafeBoxInLimit = 2;    // 保险箱每次存取最低限制	
     CfgType_SafeBoxInRetainCoin = 3;  // 保险箱存金币携带限制
     CfgType_AdGetBombCardTimes = 4;    // 广告获得炸弹卡每日总次数
     CfgType_AdGetHongZhongCardTimes = 5; // 广告获得红中卡每日总次数
     CfGType_DayGiveBeginnerMoney = 6;  // 新手红包日赠送
     CfgType_AdGetDayMaxHfq = 7;        // 每日看视频的话费劵额度	
     CfgType_GetMoneyVal = 8;           // 话费兑换现金额度
     CfgType_PhoneRechargeMin = 9;      // 充值话费最低额度
     CfgType_PhoneRechargeMax = 10;     // 充值话费最高额度
     CfgType_BeginnerTotalMoney = 11;     // 新人红包金额(单位：分)
     CfgType_NoLoseTimes = 12;          // 免输总次数
     CfgType_WinMoreTimes = 13;         // 赢翻倍总次数
     CfgType_WinMultiple = 14;          // 赢翻倍 倍数
}
message S2CCfgs
{
    map<int32, int64> items = 1;
    string quickStart = 2;      // 快速开始玩法名
    map<int32, int64> authRewards = 3;  // 实名认证奖励
    map<int32, int64> yinLiuRewards = 4;  // 包引流奖励奖励
}
enum ChatType
{
    ChatType_ShortcutText = 0;
    ChatType_Emoji = 1; 
    ChatType_Ani = 2;
}
message C2SEmojiCfgs
{     
}
message EmojiPrice
{
     int32 tableCfgId = 1;
     int32 ct = 2;
     int32 price = 3;
}
message EmojiCfg
{
     int32 id = 1;
     string name = 2;
     int32 etype = 3;
     int32 useNeed = 4;
     map<int32, EmojiPrice> consume = 5;
}
message S2CEmojiCfgs
{
     repeated EmojiCfg items = 1;
}
message C2SChat
{
     ChatType chatType = 1;
     int32 id = 2;          // 配置ID
     int64 target = 3;      // 目标玩家guid
     string content = 4;
}
message S2CChat
{
     int64 player = 1;
     ChatType chatType = 2;
     int32 id = 3;
     int64 target = 4;
     string param = 5;
     string content = 6;
}
message S2CError
{
     int32 errCode = 1;
     string msgName = 2;
     string param = 3;
}
message Time
{
	int64 timestamp = 1;
	int32 zone = 2;
}
message S2CServerInfo
{
     Time time = 1;
};
message C2SCmd
{
     string cmd = 1;
}
enum CurrencyType
{
    CT_Null = 0;
    CT_Coin = 1;    // 金币
    CT_Gem = 2;     // 宝石
    CT_HuafeiQuan = 3; // 话费券
    CT_RMB = 4;     // 人民币（分）不在玩家身上的货币中
    CT_HfqCash = 5; // 话费代金券总额(分)
}
enum ClientDeviceType
{
	CDT_Unknown = 0;
	CDT_IOS = 1;
	CDT_Android = 2;
	CDT_WebPlayer = 3;
	CDT_Windows = 4;
	CDT_MacOS = 5;
}
message S2CDouTableInfo
{
   TableCommon tableBase = 1;
   DouTableInfo tableInfo = 2;
  repeated DouPlayerInfo players = 3;
}
message S2CDouPlayerEnter
{
   DouPlayerInfo player = 1;
}
message C2SDouReady
{
}
message S2CDouReady
{
   int32 pos = 1;
}
message S2CDouStart
{
}
message S2CDouAddCards
{
  repeated int32 cards = 1;
}
message S2CDouCurChooseLandlord
{
   int32 pos = 1; // 位置
   int32 interval = 2; // 间隔时间(秒)
   int32 double = 3;// 倍数
}
message C2SDouChooseLandlord
{
   bool choose = 1; // 是否叫地主
}
message S2CDouChooseLandlord
{
   int32 pos = 1; // 位置
   bool choose = 2; // 是否叫地主
   int32 double = 3;  // 倍数
}
message S2CDouSetLandlord
{
   int32 pos = 1;
   repeated int32 cards = 2;   // 底牌
   int32 finalMultiple = 3;   // 底牌倍数
}
message S2CDouDoubleStart
{
   int32 interval = 1; // 间隔时间(秒)
}
message C2SDouDouble
{
   DouDoubleType type = 1;
}
message S2CDouDouble
{
   int32 pos = 1;
   DouDoubleType type = 2;
}
message S2CDouPlayPos
{
   int32 pos = 1;
   int32 interval = 2; // 间隔时间(秒)
   bool first = 3;   // 是否首家出
   DouCardGroup group = 4; // 
}
message C2SDouPlayCards
{
  repeated int32 cards = 1;
}
message S2CDouPlayCards
{
   int32 ec = 1;
   int32 pos = 2;
  repeated int32 cards = 3;
  DouCardType cardType = 4;
  int32 leftCount = 5;
}
message S2CDouSettlement
{
   DouWinType winType = 1;
   SpringType springType = 2; 
  repeated DouSettleInfo settleInfo = 3; // 结算信息
}
message C2SDouSetTrusteeship
{
   bool enable = 1;
}
message S2CDouSetTrusteeship
{
   int32 pos = 1;
   bool enable = 2;
}
message S2CDouBombDouble
{
   int32 multiple = 1; // 当前的倍数
}
message S2CDouMultiple
{
   int32 multiple = 1;
}
message S2CDouLiuJu
{
  repeated DouPlayerCards cards = 1; // 手牌信息
}
message S2CDouRestart
{
}
message C2SDouStartNext
{
}
message S2CDouStartNext
{
   int32 pos = 1;
   int32 round = 2; // 局数
}
// 看底牌
message C2SDouSeeFinal
{   
}
// 看某玩家的牌
message S2CDouViewCards
{
   int32 targetPos = 1;
  repeated int32 cards = 2;
}
// 某玩家看底牌
message S2CDouSeeFinal
{
   int32 pos = 1;
   repeated int32 cards = 2;
}
// 使用记牌器
message C2SDouUseRecorder
{   
}
// 开启记牌器
message S2CDouUseRecorder
{
}
// 记牌器数据
message S2CDouRecorderInfo
{
  repeated DouCardRecord items = 1;
}
enum DouPhase
{
  DouPhase_Wait = 0; 
  DouPhase_Starting = 1;
  DouPhase_DealCard = 2; 
  DouPhase_Landlord = 3;
  DouPhase_Double = 4;
  DouPhase_Play = 5;
  DouPhase_Settle = 6;
  DouPhase_Ended = 7;
}
enum DouDoubleType
{
  DouDouble_None = 0;
  DouDouble_Double = 1;
  DouDouble_Super = 2;
  DouDouble_Null = -1;
}
enum SpringType
{
  SpringType_None = 0;
  SpringType_Spring = 1;
  SpringType_Inverse = 2; // 反春
}
enum DouColorType
{
  DouColor_Spade = 0;
  DouColor_Heart = 1;
  DouColor_Club = 2;
  DouColor_Diamond = 3;
}
enum DouPoint
{
  DouPoint_Null = 0;
  DouPoint_J = 11;
  DouPoint_Q = 12;
  DouPoint_K = 13;
  DouPoint_A = 14;
  DouPoint_2 = 15;
  DouPoint_SJoker = 16;
  DouPoint_MJoker = 17;
}
enum DouCardType
{
  DouCardType_Null = 0;
  DouCardType_Single = 1;
  DouCardType_Pair = 2;
  DouCardType_Third = 3;
  DouCardType_Bomb = 4;
  DouCardType_Sequence = 5;
  DouCardType_LinkPair = 6;
  DouCardType_Airplane = 7;
  DouCardType_ThirdSingle = 8; 
  DouCardType_ThirdPair = 9; 
  DouCardType_AirplaneSingle = 10; 
  DouCardType_AirplanePair = 11; 
  DouCardType_BombSingle = 12;
  DouCardType_BombPair = 13;
  DouCardType_Rocket = 14;
  DouCardType_BombLink = 15;
};
enum DouWinType
{
  DouWin_Null = 0;
  DouWin_Landlord = 1;
  DouWin_Peasant = 2;
}
message DouCard
{
  repeated int32 cards = 1;
}
message DouCardRecord
{
   int32 pos = 1;
  repeated DouCard items = 2;
}
message DouPlayerCards
{
   int32 pos = 1;
  repeated int32 cards = 2;
}
message DouTableInfo
{
   DouRule rules = 1; 
   DouPhase phase = 2; 
   int32 round = 3; 
   int32 landlordDouble = 4; // 叫地主产生的加倍
  repeated int32 finalCards = 5;
  repeated DouCardRecord recordCards = 6;
  repeated DouPlayerCards boutCards = 7; // 当前回合出牌记录
   int32 curActPos = 8;
   int32 curActTime = 9; // 当前行动的到期时间
   int32 bombDouble = 10; 
   int32 springDouble = 11; 
   DouWinType winType = 12;
   int32 lastPlayPos = 13;
   DouCardType lastCardType = 14;
}
message DouPlayerInfo
{
   int32 pos = 1; 
   bool isLandlord = 2; 
   DouDoubleType doubleType = 3;
   bool isReady = 4; 
  repeated int32 handCards = 5; 
   int32 handCardsNum = 6; 
   bool useRecord = 7; // 是否使用了记牌器
   bool isJiao = 8;
   bool isTrusteeship = 9;
   DouCardGroup group = 10;
}
message DouSettleInfo
{
   int32 pos = 1;
   repeated int32 cards = 2; 
   repeated int32 initCards = 9;
   int32 multiple = 3;
   int64 score = 4; // 分数
   int64 expend = 5; // 真实扣除的货币数量
   bool isCoinLimit = 6; // 是否金币封顶
   bool isPochan = 7; // 是否破产
   bool isUpLimit = 8; // 是否上限封顶
}
message DouCards
{
   repeated int32 cards = 1;
}
message DouCardGroup
{
   repeated int32 single = 1;
   repeated DouCards pair = 2;
   repeated DouCards third = 3;
   repeated DouCards bomb = 4;
   repeated DouCards sequence = 5;
   repeated DouCards linkPair = 6;
   repeated DouCards airplane = 7;
   repeated DouCards bombLink = 8;
   repeated int32 joker = 9;
}
message DouRule
{
   int64 base = 1; 
   bool peek = 2; 
   bool superDouble = 3; 
   bool finalCardDouble = 4; 
   int32 maxFan = 5; 
   int32 maxRound = 6;
   bool xiPai = 7;
}
enum ErrorCode
{    
    EC_Unknown = 0;     // 未知错误
    EC_Ok = 1;          // 正确
    EC_CoinNotEnough = 10;   // 金币不足
    EC_CoinTooMany = 11;     // 金币太多
    EC_GemNotEnough = 12;    // 宝石不足
    EC_HuafeiQuanNotEnough = 13;    // 话费券不足
    EC_CfgIdErr = 20;    // 配置错误
    EC_FuncNotOpen = 21; // 功能未开启
    EC_CantHandleMsg = 22;   // 不能处理的消息 
    EC_SendAuthCodeFail = 23;   // 发送验证码失败
    EC_PlayerIsNotExist = 24;   // 玩家不存在（搜索指定玩家）
    
    EC_AdClickTooFast = 40;         // 广告点击太快    
    
    // 加入牌桌
    EC_TableNotExists = 50;     // 牌桌不存在
    EC_AlreadyInTable = 51;     // 玩家已经在牌桌中
    EC_TableIsFull = 52;        // 牌桌人数已满
    EC_TableIsPlaying = 53;     // 牌桌正在游戏中
    EC_TableNotExist = 54;      // 牌桌不存在
    // 聊天
    EC_EmojiNoTimes = 60;      // 没有足够的发表情次数
    EC_CurrencyNotEnough = 61; // 货币不足
    EC_CoinLessChatCond = 62;  // 不能发表情(金币少于聊天条件）
    EC_ChatMsgTooFast = 63;    // 聊天速度过快
    // 斗地主
    EC_DouFirstMustPlay = 70; // 首家必须出牌
    EC_DouCardTypeErr = 71; // 牌型错误
    EC_DouCardLength = 72; // 牌的长度错误
    EC_DouCardLow = 73; // 小牌
    EC_DouCardNotExist = 74; // 没有这张牌
    EC_TableNotInviteable = 80;  // 牌桌不可邀请
    EC_TargetPlayerIsPlaying = 81;  // 目标玩家在游戏中
    EC_TargetPlayerNotOnline = 82;  // 目标玩家不在线
    EC_MatchIdNotExist = 83;    // 匹配不存在
    EC_MatchIsFull = 84;        // 匹配人数已满
    
    EC_LessThanSafeBoxMinLimit = 90;  // 小于最低存入值
    EC_MoreThanSafeBoxMaxLimit = 91;    // 超过保险箱存储上限
    EC_MoreThanCoinCurrencyLimit = 92; // 超过携带上限
    EC_LessThanRetainLimit = 93;    // 小于携带最小值
    EC_PlayCantInSafeBox = 94;      // 游戏中不能存入保险箱
    EC_PlayCantOutSafeBox = 95;      // 游戏中不能取出保险箱
    // 身份认证
    EC_IdNumberError = 100; // 身份证号格式错误
    EC_LessThan16 = 101;    // 未成年人
    EC_NameIllegal = 102;   // 名字不合法
    EC_Lt18LoginTimeError = 103;   // 未成年人登录时间段错误
    EC_Lt18PlayTimeout = 104;   // 未成年人玩游戏时间到
    EC_PasswordIllegal = 110; // 密码不合法
    EC_CantExitInGame = 111;  // 游戏中不能退出
    // 商城
    EC_ShopDayBuyLimit = 120; // 达到日购买上限
    EC_LessThan18CantBuy = 121;    // 未成年人不能充值
    EC_AdTimesNotReach = 122;   // 看广告次数未达成
	EC_HasTypeItem = 123;       // 已拥有该类物品(装扮)
    // 使用道具
    EC_UsePropErrRestMjs = 127;//海底使用失败，剩余牌数过多
    EC_UsePropErr = 128;//道具使用失败
    EC_UsePropErrHued = 129;//胡牌之后不能使用道具
    EC_UsePropDayLimit = 130;   // 使用道具次数超过日限制
    EC_UsePropGameTableErr = 131; // 不能在该牌桌（房间）中使用
    EC_BuyRetainNotEnough = 132; // 购买后身上保留货币不足
    EC_UsePropRoundLimit = 133; // 使用道具次数超过本轮限制
    EC_UsePropSwapFail = 134;// 道具使用失败，牌墙中已没有可交换的牌！
    EC_UsePropHaiDiFail = 135;//海底捞月卡使用失败，剩余牌中没有可胡牌！
    EC_UsePropRuYiFail = 136;// 如意卡使用失败，底牌中已无指定的牌，请重新指定其他牌！
    EC_UsePropUsed = 137;// 此道具不可重复使用！
    EC_UsePropMoPaiFail = 138;// 牌墙中已无指定的牌，道具使用失败！
    EC_UsePropHaiDiUnXiaJiao = 139;// 未下叫
    
    EC_UsePropSeeFinalCardFail = 160;    // 看底牌失败，当前不能看底牌
    EC_GetMoneyNotEnough = 140; // 现金额度不足
    EC_GetMoneyRemainNotEnough = 141;   // 不满足提取所需达到值
    EC_GetMoneyAdNotEnough = 142;   // 广告次数不足
    EC_GetMoneyInviteNotEnough = 143;    // 邀请人数不足
    EC_GetMoneyOtherPlayTimeNotEnough = 144;  // 提现好友游戏次数不足
    EC_AdvertGetLimit = 150;    // 已达到广告获得最大值（看广告获得炸弹，红中道具）
    //活动
    EC_ActNotExist = 200;//活动不存在
    EC_ActNotOpen = 201;//活动还未开启
    EC_ActFreeTimesNot = 202;//免费次数不足
    EC_ActAdvertTimesNot = 203;//看广告次数不足
	EC_RewardAlreadyGeted = 204;//奖励领过了
	EC_RewardNotReach = 205;//还没有完成
	EC_ActOpTypeError = 206;//错误的操作类型
	EC_ActSubIdError = 207;//错误的操作目标
    
    //破产
    EC_PoChanErrCountLimit = 220;// 次数不足
    // 积分奖励
    EC_ScoreTopRewardNotReach = 230;    // 积分排名奖励不可领
    EC_ScoreTopRewardAlreadyGet = 231;  // 积分排名奖励已领
    EC_RetScoreNotEnough = 232;     // 可返还积分不足
    EC_WithdrawMoreThan200 = 233;   // 提现超过200元，请联系客服人员
    EC_WxCodeIsInvalid = 234;       // 微信code 无效
    EC_VipRewardNotReach = 240;		// VIP奖励未达成
    EC_VipRewardAlreadyGet = 241;	// VIP奖励已领
    EC_VipDayRewardAlreadyGet = 242;// VIP日奖励已领
    
    // 分段定义
    EC_ServerWillShutdown = 10000;   // 服务器即将停服维护
    EC_ErrorGobackHall = 10001;      // 网络异常，请重新进行游戏（游戏服出错，客户端不发goback切回到大厅）
    EC_GameServerMaintain = 10002;   // 游戏服分配失败，请稍后偿试，（没有足够游戏服）
    // TipMsg Id 20000开始
}
enum GameCat
{
    GameCat_Null = 0;
    GameCat_Dou = 1001;
    GameCat_Mahjong = 3001;
    GameCat_Mah3Ren2Fang = 3002;
    GameCat_TuiDaoHuMah = 4001;
}
enum GameEndGiftType
{
    GEGT_Null = 0; 
    GEGT_NoLose = 1;     // 免输
    GEGT_WinMore = 2;    // 赢翻倍
};
message S2CGameEndGiftValue
{
     GameEndGiftType type = 1;
     int64 param = 2;
}
message C2SNoLoseWinMore
{
}
message S2CNoLoseWinMore
{
     GameEndGiftType type = 1;
     int64 param = 2; // 免输的/赢翻倍的货币数
}
message C2SGenAuthCode
{
    string phone = 1;
}
message C2SGobackLobby
{    
}
enum GoodsType{
    GoodsType_Null = 0;
    GoodsType_Coin = 1;
    GoodsType_Gem = 2;
    GoodsType_HuaFeiQuan = 3;
    GoodsType_Sep = 10; 
    GoodsType_PortBorder = 11;
}
message C2SGetGradeReward
{
     int32 grade = 1;
}
message S2CGetGradeReward
{
     int32 grade = 1;
     bool isOk = 2;
}
message GradeCfg
{
     int32 grade = 1;
     int32 exp = 2;
     map<int32, int64> rewards = 3;
     string title = 4;
     string titleImg = 5;
     string icon = 6;
}
message C2SGradeCfgs
{     
}
message S2CGradeCfgs
{
     repeated GradeCfg items = 1;
}
enum GroupId
{
    GI_Null = 0;
    GI_PlayTimes = 1;       // 玩法总次数，子ID为玩法类型
    GI_WinTimes = 2;        // 玩法胜局数，子ID为玩法类型
    GI_EmojiTimes = 5;      // 表情动画可用次数，子ID为表情ID
    GI_ShopBuyTimes = 6;    // +商店购买次数
    GI_ShopBuyDonate = 11;   // +商店购买赠送
    GI_ZeroBuyAdTimes = 8;  // 0元购已看广告的次数，子ID为商品ID
    GI_Mail = 7;            // 邮件
    GI_MacthTimes = 9;		// 匹配次数，子ID为玩法类型 0 是总数
    GI_Comm = 10;           // 通用分组， 子ID为CommSubID
    GI_Dou = 12;            // 斗地主
	GI_Mj = 14;				// 麻将通用
    
    GI_RedDot = 15;         // 红点  
    
    // 赛季
    GI_SeasonScore = 20;    // 赛季积分，子ID为玩法类型
    GI_SeasonDuanWei = 21;      // 赛季段位，子ID为玩法类型
    GI_SeasonDuanWeiReward = 22;   // 段位奖励，子ID为 [(玩法类型<<16)|段位等级]，值为 RewardState
    GI_SeasonRank= 23;      // 赛季当前排名，子ID为玩法类型， 值高32位为地区类型(AreaUnit)]，低32位为排名
    GI_SeasonHint = 24;     // 赛季红点提示，子ID为玩法类型，value为1时，首次进入，为0时非首次进入
    GI_SeasonAreaId = 25;       // 玩家赛季排行所在区域ID,子ID为玩法类型
    GI_SeasonReward = 26;     // 赛季奖励，子ID为玩法类型，value为RewardState
    GI_SeasonHighestRank= 30;   // 赛季历史最高排名，子ID为玩法类型， 值高32位为地区类型(AreaUnit)]，低32位为排名
    GI_SeasonHighestDuanWei = 31;   // 赛季历史最高排名的段位，子ID为玩法类型
    GI_SeasonHighestScore = 32; // 赛季历史最高排名的积分，子ID为玩法类型
    GI_SeasonHighestAreaId = 33;// 玩家赛季历史最高排名所在区域ID，子ID为玩法类型
    GI_GradeReward = 40;        // 等级奖励状态，子ID为等级，值为 RewardState
    
    GI_RankData = 50;             // 子ID为RankCat, 值为该类型累计值
    GI_RankRedDot = 51;             // 排行榜红点： 子ID为RankCat, 值为是否有奖励可领(1：可领，其它值：不可领)
    GI_RankGetedReward = 52;        // 子ID为RankCat, 值为最后领奖日期:20220126（已领取会有该 记录
    GI_RankNum = 53;                // 今日排名，子ID为 RankCat, 值为排名
    GI_UsePropNotInTable = 60;
    GI_UsePropTimes = 61;
    GI_AutoUseItem = 62;
    GI_GetMoneyUseAdTimes = 70;     // 兑换/提现 已经消耗的广告次数, 子ID为 配置ID，值为已消耗数
    GI_GetMoneyUseInvite = 71;     // 兑换/提现 已经消耗的邀请玩家数, 子ID为 配置ID，值为已消耗数
    //破产
    GI_PoChanInfo = 75;
    //活动
	GI_ActLotteryFreeTimes = 80;       //转盘免费使用次数,子ID为活动id
	GI_ActLotteryAdvertTimes = 81;       //转盘礼券使用次数,子ID为活动id
	GI_ActContLoginBack = 82;      //连续登录补领取次数,子ID为活动id
    GI_ActProgress = 83;            //活动进度,子ID为活动id和任务id组合 actid * 10000 + 任务id
	GI_ActContLoginRewardState = 84;      //连续登录奖励状态,子ID为活动id和任务id组合	actid * 10000 + 任务id
    GI_ActRedDot = 85;       		//奖励活动 奖励状态,子ID为活动id,值为 0 - n ,相关小红点[0,1],    
	GI_ActState = 86;      		//活动状态 子ID为活动id 0未配置,1正在进行,2完成,3终止
    GI_ActCurDay = 87;          // 签到类活动今日所在ItemSubID,子ID为活动ID，值为活动的ItemSubID
    GI_ActCurRound = 88;        // 循环签到类活动当前所在轮,子ID为活动ID，值为当前轮
    GI_SeasonRound = 1000;   // 玩家各玩法的赛季数，子ID为玩法类型	
    // 积分排行榜功能
    GI_DayScore = 100;      // 积分值 子ID为日 fmt:20220530, 值为积分
    GI_WeekScore = 101;     // 周
    GI_MonthScore = 102;    // 月
    GI_YearScore = 103;         // 年
    GI_DayPay = 104;      // 日充值金额 子ID为日 fmt:20220530, 值为金额
    GI_WeekPay = 105;     // 周充值金额
    GI_MonthPay = 106;    // 月充值金额
    GI_YearPay = 107;         // 年充值金额
    GI_DayScoreRewardState = 108;      // 领奖状态，子ID为日 fmt:20220530
    GI_WeekScoreRewardState = 109;     // 子ID为周 fmt:1 - 52
    GI_MonthScoreRewardState = 110;    // 子ID为月 fmt:1 - 12
    GI_YearScoreRewardState = 111;     // 子ID为年 fmt:2022
    GI_DayPayScore = 114;      // 日充值金额积分 子ID为日 fmt:20220530, 值为金额*0.7
    GI_WeekPayScore = 115;     // 周充值金额积分
    GI_MonthPayScore = 116;    // 月充值金额积分
    GI_YearPayScore = 117;         // 年充值金额积分
    GI_VipReward = 130;         // VIP奖励领取状态，子ID：VIP等级,值：领取状态
    
    // -------------------------------------------------不通知客户端的分类--------------------------------------------
    // 不通知客户端的分类    
    GI_SepVal = 10000;      // 大于10000 不同步客户端
    GI_LuckyVal = 10001;    // 幸运值， 子ID为玩法类型
    GI_AIGameInit = 10002;  // 游戏数据初始化标志，子ID为玩法类型 + luck id
    GI_Relief = 10003;		// 救济金领取次数
    GI_LuckyValInit = 10004;    // 幸运值初始化记录
    GI_SeasonRankDate = 10005;     // 玩家所记录的赛季排行日期，子ID为玩法类型
    GI_ActFirstJoinTime = 10006;    	//首次参与活动时间 子ID为活动id 
    GI_ActLastJoinTime = 10007;       	//最后参与活动时间 子ID为活动id	
   	
	GI_FakeServerTime = 10009;     		//假的服务器时间
    // 任务
    GI_AchievStage = 10060;           // 任务阶段  groupid2stage
    GI_AchievState = 10061;            // 任务状态 groupid2state
    GI_AchievGroupVal = 10062;         // 组 完成数量 groupid2val
    GI_AChievCD= 10063;                //            achievid2Cd
    GI_AchievInfo = 10064;
    GI_AchievAdCout = 10065;    //广告观看次数
    GI_AchievAdGetCount = 10067;//广告奖励领取次数
    
        // 在线、挂机
    GI_GuaJiInfo = 10070;
    GI_ShiDuanCoin = 10071; // id:coin
    GI_ShiDuanState = 10072; // id:state
    GI_AdRewardSaveVal = 10074;
    GI_AdRewardInfo = 10075;
    GI_ZhanJi = 10076; // subID 1
    GI_ShowBox = 10077;// subid BoxFuncType ：canshow
}
// 通用分组子ID
enum CommSubID
{
    CommSubID_Null = 0;
    CommSubID_ResetTime = 1;        // 上一次日数据重置时间
    CommSubID_NoLoseTimes = 2;      // 已用免输次数
    CommSubID_WinMultipleTimes = 3;   // 已用赢翻倍次数
    CommSubID_GradeReward = 4;      // 可领等级奖励数
    CommSubID_AdBombCard = 5;              // 广告获得炸弹卡， 值为已用次数
    CommSubID_AdHongZhongCard = 6;         // 广告获得红中卡， 值为已用次数
    CommSubID_Train = 7;            //是否完成新手教程
    CommSubID_RankDate = 8;         // 排行榜数据日期
	CommSubID_AchievRed= 21;		//  成就小红点
    CommSubID_YinLiuRewardState = 22;    // 引流奖励状态
}
// 邮件子ID
enum MailSubID
{
    MailSubID_Null = 0;
    MailSubID_MailRedDot = 1;       // 邮件小红点
}
// 斗地主
enum DouSubID
{
    DouSubID_Null = 0;  
    DouSubID_RecordExpireTime = 1;  // 记牌器过期时间
    DouSubID_BombCard = 2;      // 预使用的炸弹卡数量
    DouSubID_WinStreak = 8; // 连胜
}
enum MahSubID
{
    MahSubID_Null = 0;
    MahSubID_JiPaiQiRestTime = 1;
    MahSubID_IsNew = 2;
    MahSubID_PlayerTime = 3;
    MahSubID_YinDao = 4;// 引导 玩家
}
// 奖励领取状态
enum RewardState
{
    RewardState_Null = 0;   // 未设置
    RewardState_Reach = 1;  // 达成，可领
    RewardState_Geted = 2;  // 已领取
	RewardState_Back = 3;  // 可补领 活动
}
enum AchievSubId
{
    AchievSubId_Null = 0;
    AchievSubId_LianWin = 1;
}
enum PoChanSubId
{
    PoChanSubId_UnDef = 0;
    PoChanSubId_AddGem = 1;
    PoChanSubId_DayFreeCount = 2;
    PoChanSubId_DayAdCount = 3;
    PoChanSubId_InningFreeCount = 4;
    PoChanSubId_InningAdCount = 5;
}
// 活动
enum ActSubID
{
    ActSubID_Unknown = 0;   // 未知
    ActSubID_IN = 1;     // 
    ActSubID_Finish = 2;   // 
    ActSubID_Abort = 3;  // 
}
enum GuaJiSubId
{
    GuaJiSubId_cfgId = 0;
    GuaJiSubId_coin = 1;
    GuaJiSubId_RestTime = 2;
}
message GroupValue
{
	 int32 groupId = 1;
	 int32 subId = 2;
	 int64 value = 3;
}
enum GsCat 
{
    GsCat_Normal = 0;   // 普通匹配服
    GsCat_Rank = 1;     // 排位赛服
}
message Item
{
     int32 itemType = 1;
     int64 value = 2;
     string name = 3;
     string image = 4;
}
message C2SGames
{    
}
message GameItem
{
    int32 id = 1;
    string name = 2;
}
message S2CGames
{
    repeated GameItem items = 1; 
}
message C2SEnterGame
{
     int32 game = 1;
     GsCat gsCat = 2;
}
message S2CBackLobby
{
}
// 大厅快速开始
message C2SQuickStart
{    
}
message C2SLogin
{    
}
message S2CLogin
{    
    Player data = 1;
}
message C2SLogined
{    
}
message S2CMahNewPlayerEnter
{
	TableCommon tableCommon = 1;
	repeated MahPlayerData gamePlayer = 2;
}
//  刷新牌桌数据
message S2CMahResetTable
{
	TableCommon tableCommon = 1;
	MahTableGameData gameTable = 2;
	MahTableRule gameRule = 3;
	repeated MahPlayerData gamePlayers = 4;
}
// 当前牌桌数据
message S2CMahTableData
{
	TableCommon tableCommon = 1;
	MahTableGameData gameTable = 2;
	MahTableRule gameRule = 3;
	repeated MahPlayerData gamePlayers = 4;
}
//更新玩家状态
message S2CMahUpdateTableAndPlayerState
{
	int32 tableStage = 1;
	repeated Id2Val playerState = 2;
}
message S2CGameBegin
{
	 int32 curinning = 1;
	 int32 index = 2;
	 repeated int32 touZi = 3;// 弃用
}
//准备
message C2SMahReady
{
}
// 玩家手牌
message S2CMahFaPai
{
	MahTableStage stage = 1;
	int32 restCount = 2;
	int32 moPai = 3;
	repeated int32 mjs = 4;
	repeated int32 FuKaHZIndex = 5;
	repeated int32 touZi = 6;
}
// 换三张开始
message S2CMahHSZNotify
{
	MahTableStage stage = 1;
	repeated int32 mjId = 2;
}
// 玩家选择换三张
message C2SMahHSZ
{
	repeated int32 mjs = 1;
	bool useMo = 2;// 是否使用摸牌
}
// 换三张结果
message S2CMahHSZResult
{
	MahHSZType type = 1;
	repeated int32 getMahs = 2;
	repeated int32 delMahs= 3;
	int32 newMo = 4;// 新摸牌
}
message S2CMahDingQueNotify
{
	 MahTableStage stage = 1;
	 int32 que = 2;
}
message C2SMahDingQue
{
	int32 que = 1;
}
message S2CMahDingQueResult
{
	repeated Id2Val que = 1;
}
message S2CMahMoPai
{
	int32 index = 1;
	int32 mjId = 2;
	MahTableStage stage = 3;
	bool chuoPaiAction = 4;
	KeCaoZuo operate = 5;
	int32 restCount = 6;
	repeated MahKeHuData data = 9; 
	bool ShowKeHu = 10;
	int32 param2 = 11;
}
message C2SMahChuPai
{
	 int32 mjId = 1;
}
message S2CMahChuPai
{
	int32 mjId = 1;
	int32 index = 2;
	KeCaoZuo operate = 3;
	MahPlayerState state = 4;
	int32 mjIdx = 5; // 出牌玩家插入牌的位置
}
message S2CMahHasHPG
{
	KeCaoZuo operate = 1;
}
message C2SMahHPG
{
	 int32 mjId = 1;
	 MahHPGOPerate operate = 2;
}
message S2CMahPGResult
{
	int32 index = 1;
	MahPengGang pg = 2;
	repeated MahKeHuData data = 3;
	bool ShowKeHu = 4;
}
message S2CMahHuResult
{
	repeated MahHuData hu = 1;
	repeated CoinData score = 2;
	repeated Id2Val zhuanYi = 3;
	repeated Id2Val curcoin = 4;
}
message S2CMahAuto
{
	repeated Id2Val indexAuto = 1;
	bool bZhuDong = 2;
	bool bNext = 3;
	int64 minValue = 4;
}
message C2SMahAuto
{
	bool bAuto = 1;
	bool bNext = 2;
	int64 minValue = 3;
}
message S2CMahInningOverData
{
	bool isLiuJu = 1;
	repeated MahInningResult result = 2;
	repeated MahLiuShui liuShui = 3;
	repeated int32 bigWin = 4;
}
message S2CMahGamePoChan
{
	 int32 inedx = 1;
	 MahPoChanReason type = 2;
	 int32 waittime = 3;
	 int64 curCoin = 4;
}
message S2CMahHPGDone
{
	 MahHPGOPerate operate = 1;
}
message C2SMahLiuShui
{
}
message S2CMahLiuShui
{
	repeated MahLiuShui liuShui = 1;
}
message S2CMahTiShi
{
	MahTiShi ts = 1;
}
message C2SMahHuPaiTiShi
{
}
message S2CMHuPaiTiShi
{
	repeated MahKeHuData data = 1;
	int32 mjid = 2;
	bool ShowKeHu = 3;
}
/*
message S2CMahUseProp
{
	int32 id = 1;
	int32 mo_pai_id =2;
	repeated int32 delMahs = 3;
	repeated int32 addMahs = 4;
}
*/
message C2SMahAutoUseProp
{
	 int32 id = 1;
	 bool bAuto =  2;
}
message S2CMahAutoUseProp
{
	 int32 id = 1;
	 int32 bAuto =  2;
}
message C2SMahTestMsg
{
	int32 param1 = 1;// 1 MO   2 DA  3 FAPAI 4  所有人等待时间 5 剩余张数
	repeated int32 param2 = 2;
}
message S2CUpdateJinZhongZhao
{
	repeated Id2Val idxVal= 1;
}
message S2CMahPropResult
{
	int32 type = 1;
	int32 index = 2;
	repeated int32 param1 = 3;//del
	repeated int32 param2 = 4;//add
	KeCaoZuo operate = 5;
	int32 newMo = 6;
	int32 errcode = 7;
	repeated MahKeHuData data = 8;
	int32 keHuMjId = 9;
	bool ShowKeHu = 10;
}
message S2CMahUseMoProp
{
	int32 type = 1;
}
message S2CMahMingPai
{
	int32 index = 1;
	repeated int32 mjs = 2;
	int32 moMj = 3;
}
message C2SMahMingPai
{
}
message S2CMahBetterMjSuggestion
{
	int32 badMjs = 1;
	int32 goodMjs = 2;
}
message C2SMahSet
{
	int32 type = 1;// 1 摸好牌概率
	int32 param = 2;// 1 摸好牌：百分比
}
message S2CMahSet
{
	int32 ec = 1;//
}
message S2CRobotCardsInfo
{
	int32 index = 1; // 机器人座位
	repeated int32 handMjs = 2;// 手牌 13
	map<int32,int32> pg = 3;// 碰杠的牌 MahId：MahHPGOPerate
	repeated int32 goodMjs = 4;// 机器人可胡的牌、可碰杠牌
}
message CoinData
{
	int32 idx = 1;
	int64 coin = 2;
	bool bFengDing = 3;
	bool bUseJinZhongZhao = 4;
}
message MahHuData
{
	int32 mjId = 1;
	repeated MahHu type =2;
	int32 AAAA = 3;
	int64 multiple = 4;
	int32 fromIndex= 5;
	bool translucent = 6;
	int64 truthMultiple = 7;
	int32 huIndex = 8;
}
message KeHuItem
{
	int32 mjid = 1;
	int32 mul = 2;
	repeated int32 type = 3;
}
message MahKeHuData
{
	int32 mjId = 1;
	repeated KeHuItem data = 2;
}
message MahPengGang
{
	int32 mjId = 1;
	MahHPGOPerate type = 2;
	repeated CoinData coin = 3;
	int32 fromIndex = 4;
	MahQiangGangState qiangType = 5;
	repeated Id2Val curcoin = 6;
	repeated int32 otherMj = 7;
	int32 jinZhongZhaoIdx = 8;
}
message MahTableGameData
{
	int32 tableStage = 1;
	int32 curInning = 2;
	int32 restMahCount = 3;
	int32 curIndex = 4;
	int32 lastIndex = 5;
	int32 restTime = 6;
	repeated int32 touZi = 7;
}
message KeCaoZuo
{
	repeated MahHPGOPerate operate = 1;
	repeated int32 KeHuMjs = 2;// 可以胡的牌
	repeated int32 KePengMjs = 3;//....碰
	repeated Id2Val KeGangMjs = 4;
	int32 HuFan = 5;
	bool CanPoFen = 6;
	bool CanMingPai = 7;
}
message MahPlayerData
{
	int32 index = 1;
	int32 moPaiId = 2;
	MahPlayerState state = 3;
	bool bZhuang = 4;
	int32 quetype = 5;
	bool autoOpeateState = 6;
	bool haoPaiBuHuan = 7;
	int32 operateId = 8;
	bool bReady = 9;
	bool bZhuDong = 10;
	bool usedHongZhong = 11;
	repeated int32 mjs = 12;
	repeated MahPengGang pengGangs = 13;
	repeated MahHuData hu = 14;
	repeated int32 PaiHeMahs = 15;
	repeated int32 huanSanZhangMahs = 16;
	repeated MahKeHuData data = 17;
	KeCaoZuo operate = 18; 
	int32 keHuMjId = 22;
	int32 jinZhongZhao = 23;
	bool bMingPai = 24;
	int32 nChuHongZhong = 25;// 打出的红中数
	bool ShowKeHu = 26;
}
message MahInningResult
{
	int32 index = 1;
	int64 GUID = 2;
	bool bZhuang = 3;
	int64 coin = 4;
	repeated MahHuData hu = 5;
	bool bBankruptcy = 6;
	repeated int32 mjs = 7;
	repeated MahPengGang pengGangs = 8;
	CoinData  liuju = 9;
	int64 curcoin = 10;
}
message MahLiuShui
{
	MahScoreReason reason = 1;
	repeated int32 hus = 2;
	int64 multiple = 3;
	int64 coin = 4;
	repeated int32 from  = 5;
	int32 AAAA  = 6;
	bool bMaxMultiple = 7;
	bool bDaDanDiao = 8;
	bool bPoFeng = 9;
}
message MahTableRule
{
	int32 maxMultiple = 1;	
	int64 diFen = 2;			
	 int32 inning = 3;		
	 bool huanSanZhang = 4;
	 bool dingQue = 5; 
	 bool ziMoType = 6;
	 pb.MahXLHZRuleData xlhzRule = 7;
}
message MahXLHZRuleData
{
	int32 hongZhongType = 1; // 0 : 4 红中 1：6红中  2：8红中
	bool isHongZhongGang = 2;
	bool mingPai = 3;
}
enum MahTableStage
{
	TS_WaitForBegin = 0;//牌桌初创， 等待玩家进入牌桌
	TS_TableUnReady = 1; // 等待玩家开始游戏
	TS_TableBegin = 2;// 开始游戏
	TS_FaPai = 3;// 发牌阶段
	TS_HuanSanZhang = 4; //换三张阶段
	TS_DingQue = 5;//  定缺阶段
	TS_CalcIng = 6;// 检测玩家操作
	TS_MoPaiStage = 7;// 摸牌
	TS_ChuPaiStage = 8;// 打牌
	TS_InningOver = 9;// 单局结束
	TS_GameOver = 10;// 游戏结束
	TS_InviteWait = 11;// 等待准备、邀请
	TS_Close = 12;// 关闭牌桌
}
enum MahPlayerState
{
	PS_UnReady = 0;// 未准备
	PS_Ready = 1;//已准备
	PS_MoPaiing = 2;// 摸牌
	PS_ChuPaiing = 3;// 打牌
	PS_FaPaiing = 4;//发牌
	PS_UnHSZ = 5;// 未换三张
	PS_HSZed = 6;
	PS_UnDingQue = 7;//定缺
	PS_DingQueed = 8;
	PS_UnableOperate = 11;//  游戏阶段不能操作
	PS_Operateing = 12;//  游戏阶段需要操作
	PS_PoChan = 15;
	PS_GameOver = 16;// w 玩家当前轮游戏结束
	PS_ChongZhi = 17;
	PS_GiveUp = 21;// 复活阶段
	PS_Leave = 22;// 离开牌桌
}
//  麻将花色
enum MahColor
{
	CL_Wan = 0;
	CL_Tong = 1;
	CL_Tiao = 2;
	CL_Zi = 3;
	CL_Other = 13;// 其他用处的麻将
}
// 麻将ID
enum MahId
{
	MJ_Id_Null = 0;
	Wan1=1;//WAN
	Wan2=2;
	Wan3=3;
	Wan4=4;
	Wan5=5;
	Wan6=6;
	Wan7=7;
	Wan8=8;
	Wan9=9;
	Tong1=11;//TONG
	Tong2=12;
	Tong3=13;
	Tong4=14;
	Tong5=15;
	Tong6=16;
	Tong7=17;
	Tong8=18;
	Tong9=19;
	Tiao1=21;//TIAO
	Tiao2=22;
	Tiao3=23;
	Tiao4=24;
	Tiao5=25;
	Tiao6=26;
	Tiao7=27;
	Tiao8=28;
	Tiao9=29;
	ZiHongZhong = 35;
	FuKaHongZhong = 135;
}
enum MahHSZType
{
	HSZ_ClockWise =0;//顺时针
	HSZ_AntiClockWise = 1;//逆时针
	HSZ_OppoSiteSide = 2;//对家
}
enum MahHPGOPerate
{
	HPG_Guo = 0;	
	HPG_Hu = 1;//胡
	HPG_Peng = 2;
	HPG_DianGang = 4;//点杠
	HPG_BuGang = 8;//补杠
	HPG_AnGang = 16;//暗杠	
}
// 抢杠 那组牌的状态
enum MahQiangGangState
{
	QGS_Normal = 0;
	QGS_HasQiangGang = 1;
	QGS_NoQiangGang = 2;
	QGS_BackToPeng = 3;
}
// 胡牌类型
enum MahHu
{
	Hu_UnHu = 0;
	Hu_PingHu = 1;
	Hu_JinGouDiao =2;
	Hu_YiBanGao =3;
	Hu_ShuangAnKe =4;
	Hu_QuanZhong =5;
	Hu_QiDui =6;
	Hu_GangShangPao =7;
	Hu_SanJieGao =8;
	Hu_QuanXiao =9;
	Hu_DaYuWu =10;
	Hu_YaoJiu =11;
	Hu_QuanYaoJiu =12;
	Hu_YiTiaoLong =13;
	Hu_ShiErJinChai =14;
	Hu_SuHu =15;
	Hu_QuanDa =16;
	Hu_DuanYaoJiu =17;
	Hu_TuiBuDao =18;
	Hu_BenJin =19;
	Hu_JiuLianBaoDeng =20;
	Hu_DanDiao =21;
	Hu_SiJieGao =22;
	Hu_QiangTiHu =23;
	Hu_DiHu =24;
	Hu_ZiMo =25;
	Hu_YiSeShuangLongHui =26;
	Hu_WuXingBaGua =27;
	Hu_ZhuoWuKui =28;
	Hu_HaiDiLaoYue =29;
	Hu_MenQing =30;
	Hu_QingYiSe =31;
	Hu_SiAnKe =32;
	Hu_TianHu =33;
	Hu_SanLongQiDui =34;
	Hu_LiuLianShun =35;
	//Hu_ZiMoJiaFan =36;
	Hu_ShuangLongQiDui =37;
	Hu_BuQiuRen =38;
	Hu_LianQiDui =39;
	Hu_ShouZhongBaoYi =40;
	Hu_LaoSaoPei =41;
	Hu_JiangDui =42;
	Hu_ShuangTongKe =43;
	Hu_ShiBaLuoHan =44;
	Hu_KanZhang =45;
	Hu_BaiWanShi =46;
	Hu_DuiDuiHu =47;
	Hu_BianZhang =48;
	Hu_GangShangHua =49;
	Hu_HongZhongDiao =50;
	Hu_QuanDaiWu =51;
	Hu_XiaoYuWu =52;
	Hu_QuanShuangKe =53;
	Hu_LongQiDui =54;
	Hu_LvYiSe =55;
	Hu_MiaoShouHuiChun =56;
	Hu_QiangGangHu =57;
	Hu_SanAnKe =58;
	Hu_HongZhongGang = 59;
	Hu_MingPai = 60;
	Hu_WuHuSiHai = 61;
	Hu_TianLongBaBu = 62;
	Hu_XianHeZhiLu = 63;
	Hu_KaiMenJianShan = 64;
	Hu_ChangEBengYue = 65;
	Hu_BaiNiaoChaoFeng = 66;
	Hu_YouRenYouYu= 67;
	Hu_YiTongJiangShan = 68;	
	Hu_WanMeiQingRenJie = 69;
	Hu_DianDaoQianKun = 70;
	Hu_JiuWuZhiZun = 71;
	Hu_ShiQuanShiMei = 72;
}
// 主要是流水分数改变的原因
enum MahScoreReason
{
	SR_UnDefine = 0;
	SR_Hu = 1;    
	SR_DianGang = 2;
	SR_BuGang = 3; 
	SR_AnGang = 4; 
	SR_HuJiaoZhuanYi = 5;
	SR_DaJiao = 6;
	SR_HuaZhu = 7;
	SR_TuiSui = 8; 
}
enum MahPoChanReason
{
	PCR_Null = 0;
	PCR_PoChan = 1;
	PCR_ChongZhi = 2;
	PCR_FuHuo =3;
	PCR_GiveUp = 4;
}
//
enum MahActionTime
{
	MAT_Null = 0;
	MAT_KaiJuDongHua = 1001;
	MAT_FaPai = 1002;
	MAT_HSZ = 1003;
	MAT_DingQue = 1004;	
	MAT_MoPai = 1005;
	MAT_DaPai = 1006;
	MAT_HuJiaoZhuanYi = 1007;
	MAT_HuaZhu = 1008;
	MAT_DaJiao = 1009;
	MAT_TuiShui = 1010;
	MAT_InningOver = 1011;
	MAT_Hu = 1012;
	MAT_Peng = 1013;
	MAT_Gang = 1014;
	MAT_PoFeng = 1015;
	MAT_GangShangHua = 1016;
}
enum MahExtraLiuShuiType
{
	ELS_Null = 0;
	ELS_DaDanDiao = 1;
}
enum MahErrCode
{
	MahErr_Sccuess = 0;
	// 定缺
	// 换三张
	MahErr_HSZHuaSeErr = 1;//  花色错误
	MahErr_HSZCountErr = 2;// 数量错误
	// 操作
	MahErr_UnableOpearte = 3;// 操作错误
	MahErr_Operated = 4;
	//打牌
	MahErr_UnableDaPai = 5;
}
// 文字提示
enum MahTiShi
{
	GuoShuiBuHu = 0;
	BuNengGang = 1;
}
message C2SMails
{
}
message S2CMails
{
    repeated UserMail mail = 1;
}
message C2SReadMail
{
    repeated int64 ids = 1; 
}
message S2CReadMail
{
    repeated int64 ids = 1; 
}
message C2SGetMailAtta
{
    repeated int64 ids = 1; 
}
message S2CGetMailAtta
{
    repeated int64 ids = 1; 
    repeated Item atta = 2; 
}
message C2SDelMail
{
    repeated int64 ids = 1; 
}
message S2CDelMail
{
    repeated int64 ids = 1; 
}
message UserMail
{
     int64 id = 1;
     int64 sender = 2;
     int64 receiver = 3;
     string title = 4;
     string content = 5;
     int64 date = 7;
     repeated Item atta = 6;
     int32 reason = 8;
     int64 param = 9;
     int32 state = 10;
     string senderName = 11;
}
enum MailState {
    MailState_UnRead = 0;
    MailState_Read = 1;
    MailState_GetAtt = 2;
}
message C2SGetMoney
{
    int32 id = 1;
    string param = 2;   // 微信code / 电话号码
}
message S2CGetMoney
{
    int32 id = 1;
    int32 ec = 2;
}
// 请求余额明细
message C2SGetMoneyDetail
{    
}
message S2CGetMoneyDetail
{    
    repeated GetMoneyDetail items = 1;
}
// 请求配置项
message C2SGetMoneyCfgs
{    
}
message S2CGetMoneyCfgs
{    
    repeated GetMoneyCfg items = 1;
}
// 每日赠送
message S2CGiveBeginnerMoney
{
    int32 total = 1;
    int32 left = 2;
    int32 cur = 3;
    bool first = 4; // 是否首次登录
}
// 取邀请列表
message C2SGetInviteList
{    
}
message InviteItem
{
    int64 playerGuid = 1;
    string name = 2;
    int64 regTime = 3;
    int32 playTimes = 4;
    bool reach = 5;
}
message S2CGetInviteList
{    
    repeated InviteItem items = 1;
}
enum MoneyType{
    MT_Null = 0;
    MT_Beginner = 1;    
}
enum GetMoneyType{
    GMT_Null = 0;
    GMT_WithDraw = 1;           // 提现
    GMT_PhoneCharge = 2;        // 话费充值
}
message GetMoneyCfg{
    int32 id = 1;
    GetMoneyType iType = 2;
    int32 money = 3;    // 多少分
    int32 needRemain = 4;
    string remainDesc = 5;
    int32 needAd = 6;
    string adDesc = 7;
    int32 needInvite = 8;
    string inviteDesc = 9;
    int32 invitePlayTimes = 10;
    string invitePlayDesc = 11;
}
enum GetMoneyState{
    GetMoneyState_Null = 0;
    GetMoneyState_Succ = 1;
    GetMoneyState_Fail = 2;
    GetMoneyState_Process = 3;
}
message GetMoneyDetail{
    int64 id = 1;           // 唯一ID
    int64 uid = 2;
    int64 time = 3;
    GetMoneyType iType = 4;
    int32 amount = 5;
    int32 remain = 6;
    string param = 7;
    int32 cash = 8;
    GetMoneyState state = 10;
}
message C2SActNotice
{	
}
message S2CActNotice
{
	 repeated LoginNotice items = 1;
}
// 滚动公告
message S2CRollingNotice
{
	repeated RollingNotice items = 1;
}
message S2CDeleteNotice
{
	repeated DeleteNotice items = 1;
}
// UI开关
message S2CUISwitches
{
	map<string, int32> items = 1;
}
message LoginNotice
{
	enum TabType{
		Null = 0;
		Act = 1;	// 活动
		Notice = 2;	// 公告
		NotShow = 3; //
	}
	 int32 id = 1;
	 int32 type = 2;//类型 
	 string title = 3;
	 string text = 4;//文本内容
	 string imageUrl = 5;//图片地址	
	 NoticeTarget targetType = 6;//跳转类型	
	 string target = 7;//跳转地址
	 bool btnSwitch = 8;		//按钮开关
	 string btntext = 9;//按钮文本
	 bool popup = 10; // 是否弹出
	 TabType tabType = 11;	// 标签页
	 int64 opentime = 12;
	 int64 endtime = 13;
	 int32 sort = 15;
	 int32 state = 14;// 0.open-end time 1 常开 2 常关
	 
}
message RollingNotice
{
	 int32 id = 1;
	 string text = 2;//公告文字
	 int32 cd = 3;//cd时间
	 int64 opentime = 4;
	 int64 endtime = 5;
	 RollingNoticeType type = 6;//公告类型
	 int32 state = 7;// 0.open-end time 1 常开 2 常关
}
message UiItem
{
	 string id = 1;
	 int32 state = 2;
}
message UISwitchGroup
{
	 int32 pkgType = 1;
	repeated UiItem items = 2;
}
message DeleteNotice
{
	 NoticeType type = 1;
	 int32 id =2;
}
enum NoticeType
{
	NoticeType_Null = 0;//
	NoticeType_Login = 1;//登录公告
	NoticeType_Rolling = 2;//滚动公告
};
enum RollingNoticeType
{
	RNT_Null = 0;//默认值
	RNT_System = 1;//系统
	RNT_Game = 2;	//游戏
}
enum NoticeState
{
	NS_effectiveTime = 0;//默认值， 开启关闭时间生效
	NS_Open = 1;//常开
	NS_Close = 2;//常关
}
enum NoticeTarget
{
	NT_Url = 0;//跳转URL
	NT_Uuid = 1;//跳转界面
}
enum OrderState
{
    OS_Null = 0;
    OS_Succ = 1;
    OS_Fail = 2;     // 失败
    OS_Process = 3;  // 处理中
    OS_Audit = 4;    // 审核中
    OS_AuditFail = 5; // 审核失败
}
message C2SIapGetOrderId
{
	 GenOrderItem item = 1;
}
// 请求生成订单号返回
message S2CIapGetOrderId
{
	 GenOrderItem item = 1;
	 bool result = 2;
	 string orderId = 3;
	 string param = 4;
}
// 请求验证支付
message C2SIapReceipt
{
	 int32 iapType = 1;
	 string orderId = 2;
	 string shopId = 3;
	 string param = 4;
}
// 应用内购买成功通知
message S2CIapSucc
{
	 int32 iapType = 1;		// sdk 类型
	 string sdkOrderId = 2;	// sdk方 订单号
	 string orderId = 3;	// 我方订单号
}
message GenOrderItem
{
     int32 iapType = 1;
	 string shopId = 2;
	 string param = 3;
}
enum IapType
{
  IapType_Null = 0;
  IapType_WeiXin = 1;
  IapType_Apple = 2;
  IapType_Alipay = 3;
  IapType_HuaWei = 4;
  IapType_Oppo = 5;
  IapType_Vivo = 6;
  IapType_WeiXinVp = 7;
  IapType_MI = 8;
}
enum PkgType
{
    PkgType_Test = 0; 
    PkgType_Apple = 1; 
	PkgType_HuaWei = 2;
	PkgType_WeiXinH5 = 3;
	PkgType_DouYinH5 = 5;
	PkgType_TMallH5 = 6;
	PkgType_Oppo = 7;
	PkgType_Vivo = 8;
	PkgType_NormalH5 = 9;
	PkgType_Normal = 10; 
	PkgType_TestH5 = 11;
	PkgType_MI = 12;
}
enum PlayerLoc{
     PlayerLoc_Lobby = 0;
     PlayerLoc_Game = 1;
}
message Player
{
     int64 id = 1;
     int64 guid = 2;
     string account = 3;
     string name = 4;
     string portraits = 5;  
     string trueName = 6;
     string idNum = 7;
     map<int64, int64> attrs = 8;
     map<int64, int64> currencies = 9;
     repeated GroupValue groups = 10;
     bytes safeBox = 11;
     string lbs = 12;
     string provName = 13;
     string cityName = 14;
     PlayerLoc location = 100;
}
message S2CUpdatePlayer
{
     Player data = 1;
}
message S2CPlayerAttr
{
    map<int64, int64> items = 1;
}
message S2CCurrency
{
     map<int64, int64> items = 1;
}
message S2CGroupValue
{
    repeated GroupValue groups = 1;
}
message C2SViewPlayer
{
     int64 guid = 1;
}
message S2CViewPlayer
{
     Player data = 1;
}
message C2SSyncState
{     
}
message S2CSyncState
{
     PlayerLoc location = 1;
     bool isGame = 2;
     int32 gameCat = 3;
     bytes gameData = 4;
}
// 快速开始数据（麻将）
message S2CQuickStart
{
     int32 cfgId = 1;    
     string name = 2;
}
message LbsData
{
     int32 cityId = 1;
     int32 provId = 2;
     string cityName = 3;
     string provName = 4;
}
// 我的位置（赛季排行榜可以使用获取省、市排行榜用）
message S2CMyLbs
{
     LbsData item = 1;
}
message PlayerShowBase
{
    int64 uid = 1;
    int64  guid = 2;
    string name = 3;
    string portraits = 4;
    int64  portBorder = 5;
}
message C2SHasPoChan
{
    int32 gameCat = 1;
    int32 cfgId = 2;
}
message S2CPoChanMsg
{
    int32 type = 1;//PoChanTable
    repeated PoChanData data = 2;
    int32 waittime = 3;
}
message C2SPoChanMsg
{
    int32 type = 1;//PoChanRewardType
    int32 id = 2;
}
message S2CGetPoChanReWard
{
    int32 errCode = 1;
    repeated Id2Val reward = 2;
    int32 TuiJianId = 3;
    int32 waittime = 4;
}
message C2SPoChangAdStart
{
    
}
message PoChanData
{
    int32 id = 1;
    int32 type = 2;//PoChanRewardType
    int32 curCount = 3;
    int32 dayCount = 4;
    int32 inningCount = 5;
    Id2Val cost = 6;
    repeated Id2Val reward = 7;
    int32 JinZhongZhao = 8;
    int32 totalCount = 9;
    string zheKou = 10;
}
enum PoChanRewardType
{
    PoChanReward_Free = 0;
    PoChanReward_Ad = 1;
    PoChanReward_Gem = 2;
    PoChanReward_HuaFeiQuan = 3;
}
enum PoChanTable
{
    PoChanTable_None = 0;
    PoChanTable_JJJ=1;
    PoChanTable_PoChan = 2;
    PoChanTable_TuiJian = 3;
}
message C2SGetBag
{    
}
message S2CGetBag
{
    repeated PropItem items = 1;
}
// 使用物品
message C2SUseProp
{
    int64 id = 1;      // 物品ID
    repeated int64 params = 2;  // 参数
}
message S2CUseProp
{
    int32 result = 1;
    int64 id = 2;
	int32 cfgId = 3;
    string name = 4;
}
message S2CPropUpdate
{
    PropItem item = 1;
}
message S2CDelProp
{
    int64 id = 1;
}
message C2SAutoUseProp
{
    int32 id = 1;  // 配置ID
}
message C2SPropTableState
{
    int32 open = 1;// 前端主动操作道具窗口
}
message S2CPropTableState
{
    int32 open = 1;// 服务器里的 道具窗口状态
}
// 获取拥有的装扮
message C2SGetZb
{    
}
message S2CGetZb
{
    repeated PropItem items = 1;
}
message PropItem
{
    int64 id = 1;
    int64 uid = 2;    
    Item item = 3; 
    int32 quantity = 4;
    int64 create_time = 5;
    int64 expire_time = 6;
}
enum PropType
{
    PropType_Null = 0;
    PropType_Currency = 1;          // 货币
    PropType_ChatEmoji = 2;         // 表情
    PropType_ChatAni = 3;           // 动画
    PropType_PortFrame = 10;        // 头像框
    PropType_Desk = 11;             // 装扮(牌桌)
    // 麻将
    PropType_HongZhongCard = 100;   // 红中卡
    PropType_SilverSwapCard = 101;  // 银换牌卡
    PropType_GoldSwapCard = 102;   // 金换牌卡
    PropType_SuperSwapCard = 103;  // 至尊卡
    PropType_FixColorCard = 104;    // 定色卡
    PropType_HaiDiLaoYue = 105;     // 海底捞月
    PropType_YanQueCard = 106;      // 厌缺卡
    PropType_RuYiCard = 107;        // 如意卡
    PropType_SwapColorCard = 108;   // 换色卡
    PropType_PoFengCard = 114;      // 破封卡
    PropType_JiPaiQi = 115;      // 记牌器
    // 斗地主
    PropType_FinalCard = 109;       // 看底牌
    PropType_BombCard = 110;        // 炸弹卡
    PropType_RecordCard = 111;      // 记牌器卡
    PropType_ViewOther = 112;        // 查牌卡
    PropType_SuperDouble = 113;     // 超级加倍      
}
message C2SRaces
{    
}
// 返回赛事列表
message S2CRaces
{
    repeated RaceShowItem items = 1;
}
// 返回当前赛事（断线重连，玩家当前所在的比赛信息）
message S2CCurRace
{
    RaceShowItem item = 1;
}
// 报名比赛
message C2SEnrollRace
{
    int64 id = 1;
    int32 type = 3; // 使用的货币类型（包括道具类型）
    string inviteCode= 2;    // 邀请码
}
// 报名比赛
message S2CEnrollRace
{
    int64 id = 1;
    int32 ec = 2;
}
// 取消报名
message C2SUndoEnrollRace
{
    int64 id = 1;
}
message S2CUndoEnrollRace
{
    int64 id = 1;
    bool result = 2;
}
// 请求冠军榜
message C2SRaceChampionship
{    
}
// 请求冠军榜
message S2CRaceChampionship
{
    repeated ChampionItem items = 1;
}
// 冠军榜新增通知
message S2CRaceNewChampionship
{
    ChampionItem item = 1;
}
// 请求我的获奖记录
message C2SMyRaceReward
{    
}
message MyRaceReward
{
    string raceName = 1;
    int64 time = 2;
    int32 rank = 3;
    Item reward = 4;
}
// 请求我的获奖记录
message S2CMyRaceReward
{
    repeated MyRaceReward items = 1;
}
// 开赛通知
message S2CPlayRaceNotice
{
    PlayRaceNotice notice = 1;
}
// 进入比赛等待界面（等待开始队列）
message C2SWaitRacePlay
{
    int64 id = 1;  // 比赛ID
}
message WaitRaceInfo
{
    int64 id = 1;          // 赛事ID
    int64 playTime = 3;   // 定时赛 开赛时间
    int32 playerNum = 4;  // 进入等待的人数
    int32 minPlayerNum = 5; // 开赛最小人数
}
// 通知玩家进入等待队列
message S2CWaitRacePlay
{
    WaitRaceInfo info = 1;
}
// 常规赛开赛倒计时
message S2CPlayRaceCountdown
{
    int32 leftTime = 1;   // 开赛剩余秒数
}
// 比赛开启失败通知（报名人数不足）
message S2CRaceStartFail
{
    int32 id = 1;
    int32 ec = 2;
}
message RacePhaseInfo
{
    RacePhase phase = 1;    // 比赛阶段
    int32 round = 2;           // 当前轮数
    int32 totalRound = 3;     // 总轮数
    RaceRule rule = 4;      // 规则
    int32 fixGames = 5;       // 固定局数（for 定局积分）    
    int32 endPlayerNum = 6;  // 截止人数（for 打立出局）
    int32 promotionRank = 7;  // 晋级名次（all)
}
// 比赛阶段通知(轮次开始)
message S2CRacePhase
{
    RacePhaseInfo phase = 1;
}
// 通知马上进房间开始对局
message S2CRacePlay
{    
    int32 eliminatePoint = 1;
}
// 匹配玩家等待状态
enum MatchState
{
    MatchState_Null = 0;
    MatchState_WaitGame = 1;    // 等待对局
    MatchState_WaitEnd = 2;     // 等待本轮结束
}
// 等待匹配中 通知
message S2CRaceWaitMatch
{
}
// 等待本轮结束，通知（对局中和等待中的玩家）
message S2CRaceWaitRoundEnd
{
}
message RaceRankInfo
{
    int32 myRank = 1;         // 我的排名
    int32 playerNum = 2;      // 当前轮总玩家数
}
// 玩家排名变化通知
message S2CRaceRank
{
    RaceRankInfo rank = 1;
}
// 晋级状态
enum ThroughtState
{
    Through_Wait = 0;    // 等待晋级
    Through_Succ = 1;    // 晋级成功
    Through_Fail = 2;    // 晋级失败
}
message RaceThrough
{
    ThroughtState state = 1;   // 状态
    repeated int32 throughPlayer = 2;  // 晋级玩家进度图
    int32 waitRoom = 3;   // 等待房间数
    int32 rank = 4;        // 名次
    int32 playerNum = 5;      // 当前轮总玩家数
    bool bye = 6; // 是否因为轮空而进级
    int32 leftTime = 7;   // 剩余秒数（常规赛轮结束等待晋级时间）
}
// 晋级通知
message S2CRaceThrough
{
    RaceThrough through = 1;
}
// 结算数据
message RaceSettle
{
    int64 id = 1;
    string name = 2;
    int32 eliminateRival = 3; // 淘汰对手数
    int32 rank = 4;            // 我的排名
    Item rewards = 5;        // 奖励
    int64 time = 6;            // 时间
}
// 比赛结算
message S2CRaceSettle
{
    RaceSettle settle = 1;
}
// 查看常规赛 赛事排行榜
message C2SGetRaceTop
{
    int64 id = 1;  // 赛事ID
    int32 startPos = 2; // 开始索引位置
}
// 查看常规赛 返回
message S2CGetRaceTop
{
    int64 id = 1;
    int32 ec = 2;
    repeated GeneralRaceRank items = 3;
    GeneralRaceRank myItem = 4;
}
// 请求退出比赛
message C2SExitRace
{
    int64 id = 1;
}
// 请求退出比赛返回
message S2CExitRace
{
    int64 id = 1;
    int32 ec = 2;
}
enum ChampionTimesType
{    
    ChampionTimesType_Null = 0;
    ChampionTimesType_RealTime = 1;
    ChampionTimesType_Normal = 2;
}
// 赛事循环
enum RaceLoopType
{
    RaceLoopType_Null = 0;
    RaceLoopType_Loop = 1;       // 循环赛
    RaceLoopType_Single = 2;     // 单场赛
	RaceLoopType_LoopEveryday = 3;       // 每日循环赛
}
// 开赛类型
enum RaceStartRule
{
    RaceStartRule_Null = 0;
    RaceStartRule_Arrive = 1;    // 满人开
    RaceStartRule_Time = 2;      // 定时开
}
// 比赛类型
enum RaceType
{
    RaceType_Null = 0;
    RaceType_Gold = 1;       // 金豆PK赛
    RaceType_CallCharge = 2; // 话费争夺赛
    RaceType_RealObject = 3; // 实物福利赛
    RaceType_Normal = 4;     // 常规赛
    RaceType_Appointment = 5; // 预约赛
    RaceType_RedEnv = 6;     // 红包争夺赛
    RaceType_GoldRob = 7;    // 金豆争夺赛
}
// 赛制
enum RaceRule
{
    RaceRule_Null = 0;
    RaceRule_PlayOut = 1;    // 打立出局
    RaceRule_FixRoundScore = 2;   // 定局积分
}
// 比赛阶段
enum RacePhase
{
    Phase_Null = 0;
    Phase_Audition = 1;     // 海选
    Phase_Preliminary = 2;  // 预赛
    Phase_Semi = 3;         // 晋级赛
    Phase_Semifinal = 4;    // 半决赛
    Phase_Final = 5;        // 决赛
}
// 比赛奖励描述条目
message RaceRewardDesc
{
    ValRange rank = 1;
    string rewardText = 2;
}
// 比赛奖励
message RaceReward
{
    ValRange rank = 1;
    Item reward = 3;
    int32 mailId = 4;
    string rewardText = 5;
}
// 冠军榜条目
message ChampionItem
{
    int64 time = 1;            // 赛事时间
    int32 raceId = 2;      // 赛事ID
    string raceName = 3;   // 赛事名
    RaceType raceType = 4;    // 赛事类型
    Item rewards = 5;    // 冠军奖励，可能没有数据（线下直接发放）
    int64 guid = 6;            // 玩家guid
    string name = 7;           // 玩家昵称
    string portraits = 8;      // 头像
    int32 portBorder = 9;      // 头像框    
}
// 开赛通知信息
message PlayRaceNotice
{
    int64 id  = 1;
    string name = 2;
    int32 leftTime = 3;          // 剩余时间(秒)
}
// 比赛状态
enum RaceState
{
    RaceState_Null = 0;
    RaceState_Enroll = 1;
    RaceState_Play = 2;
    RaceState_End = 3;
    RaceState_Fail = 4;
}
// 报名限制类型
enum EnrollNeedType
{
    ENT_Null = 0;
    ENT_Level = 1;      // 等级
    ENT_DanLevel = 2;   // 段位等级
    ENT_Vip = 3;        // VIP等级
    ENT_Coin = 4;       // 金币
    ENT_Gem = 5;        // 宝石
    ENT_HuafeiQuan = 6; // 话费券
}
// 报名限制
message EnrollLimit
{
    EnrollNeedType needType = 1 ;
    int32 value = 2;       // 限制值
}
// 赛事项（客户端显示用）
message RaceShowItem
{
    int32 cfgId = 1;              // 赛事ID
    int64 id = 2;                  // 实例ID
    RaceState state = 14;       // 当前状态
    RaceType raceType = 3;  // 类型
    string name = 4;               // 名称
    int32 areaId = 13;			// 地区ID    
    string rewardUrl = 5;         // 奖励图url
    string ruleText = 6;          // 规则文本
    repeated RaceRewardDesc rewardDesc = 7;        // 奖励文本
    repeated RaceReward rewards = 16;    // 奖励
    string address = 8;            // 比赛地点
    int32 minPlayerNum = 9;      // 开赛最低人数 
    repeated Id2Val enroll = 10;             // 报名费（支持多种消耗
    bool showEnrollNum = 15; // 是否显示报名人数
    EnrollNeedType needType = 25;	// 限制类型
    int32 needValue = 17;       // 需要值
    int64 enrollTime = 20;        // 报名时间
    RaceStartRule startRule = 21; // 开赛规则
    bool manualStart = 22;        // 是否手动开赛
    int64 playTime = 23;          // 开赛时间
    int32 gameType = 24;          // 玩法类型
    // for 常规赛
    bool invitecode= 30;         // 是否有邀请码
    // for 预约赛
    string appointment = 31;       // 预约文本
    int32 enrollPlayerNum = 32;  // 已报名人数
    int64 playEndTime = 62; // （单场常规赛时的比赛结束时间）
    bool viewRank = 60;         // 是否可查看排名（单场常规赛时）
    int64 viewRankTime = 61; // 查看排名时间限制
}
// 常规赛奖励记录
message GeneralRaceRank
{
    int64 id = 1;              // 赛事实例ID
    int32 raceId = 2;      // 赛事ID
    int32 raceType = 3;    // 类型
    string raceName = 4;   // 赛事名
    int64 time = 5;            // 赛事时间
    
    string rewardText = 6;    // 奖励描述
    int32 rank = 7;            // 名次
    int64 playerGuid = 8;     // 玩家guid
    string playerName = 9;    // 玩家昵称
    string portraits = 10;     // 头像
    int32 portBorder = 11;     // 头像框    
    
    int64 raceWelfare = 12;    // 玩家福利分
}
enum RankCat
{
    RankCat_Null = 0;
    RankCat_Coin = 1;
    RankCat_WinCoin = 2;
    RankCat_PlayTimes = 3;
    RankCat_Multiples = 4;// 倍数榜
}
message C2SGetRankList
{
    RankCat cat = 1;
}
message S2CGetRankList
{
    RankCat cat = 1;
    CatRankItem todayData = 2;
    CatRankItem yesData = 3;
}
message C2SGetRankReward
{
    RankCat cat = 1;
}
message C2SRankRewardCfgs
{
}
message S2CRankRewardCfgs
{
    repeated RankRewardCfg items = 1;
}
message RankItem
{
    int32 date = 1;
    int32 cat = 2;
    PlayerShowBase player = 3;
    int64 value = 4;
    int32 rank = 5;
}
message CatRankItem
{
    int32 cat = 1;
    repeated RankItem items = 2;
}
message RankRewardCfg
{
    int32 id = 1;
    int32 cat = 2;
    int32 rankStart = 3;
    int32 rankEnd = 4;
    map<int32, int64> rewards = 5;
    int32 mailId = 6;
}
enum RedDotId
{
    RedDotId_Null = 0;
    RedDotId_Mail = 1;  // 邮件 
    RedDotId_Shop = 2;  // 商店 
    RedDotId_RankList = 3;  // 排行榜 
    RedDotId_SignIn = 4;    // 签到 
    RedDotId_Lottery = 5;   // 转盘 
    RedDotId_Bag = 6;       // 背包 
    RedDotId_Money = 7;     // 兑换 
    RedDotId_Achiev = 8;    // 任务
    RedDotId_Act = 9;       // 活动
    RedDotId_TimedLogin = 10;    // 定时登录
    RedDotId_Set = 11;      // 设置
}
message S2CRedDotChange
{
    RedDotId id = 1;
}
message S2CSafeBox
{
    bytes value = 1;
}
// 存入保险箱
message C2SInSafeBox
{
    int64 coin = 1;
}
message S2CInSafeBox
{
    int32 ec = 1;
}
// 从保险箱取出
message C2SOutSafeBox
{
    int64 coin = 2;
}
message S2COutSafeBox
{
    int32 ec = 1;
}
message C2SGetScoreTop
{
    ScoreType scoreType = 1;
}
message S2CGetScoreTop
{
    ScoreType scoreType = 1;
    repeated ScoreTopData items = 2;
}
// 获取积分奖励列表
message C2SGetScoreRewardList
{
    ScoreType scoreType = 1;
}
message S2CGetScoreRewardList
{    
    ScoreType scoreType = 1;
    repeated ScoreTopData items = 2;
}
// 领取奖励(加到玩家身上)
message C2SGetScoreReward
{
    ScoreType scoreType = 1;
    int64 date = 2;
}
message S2CGetScoreReward
{
    ScoreType scoreType = 1;
    int64 date = 2;
    int32 ec = 3;
}
// 提取金额
message C2SWithdrawScore
{
    ScoreType scoreType = 1;
    int32 amount = 2;
    string wxCode = 3;  // 微信授权code
}
message S2CWithdrawScore
{
    ScoreType scoreType = 1;
    int32 amount = 2;
    int32 ec = 3;
}
// 话费充值
message C2SHfqRecharge
{
    string phone = 1;
    int32 amount = 2;
}
message S2CHfqRecharge
{
    string phone = 1;
    int32 amount = 2;
    int32 ec = 3;
}
// 提取返还记录
message C2SWithdrawScoreLog
{
}
message S2CWithdrawScoreLog
{
    repeated WithScoreLogItem items = 1;
}
// 话费充值记录
message C2SGetHfqRechargeLog
{    
}
message S2CGetHfqRechargeLog
{
    repeated HfqRechargeLogItem items = 1;
}
// 获取积分排名奖励配置
message C2SGetScoreRewardCfgs
{
}
message S2CGetScoreRewardCfgs
{
    repeated ScoreTopRewardEx items = 1;
}
enum ScoreType
{
    ST_Null = 0;
    ST_Day = 1;
    ST_Week = 2;
    ST_Month = 3;
    ST_Year = 4;
}
message ScoreTopData
{
    PlayerShowBase player = 1;
    ScoreType scoreType = 2;
    int32 date = 3;
    int64 score = 4;
    int32 rank = 5;
    int32 state = 6;
    int64 changeVal = 7;
}
message ScoreData
{
    int32 date = 1;
    ScoreType scoreType = 2;
    int64 score = 3;
}
message ScoreTopSaveData
{
    PlayerShowBase player = 1;
    repeated ScoreData items = 2;
}
message PayScoreData
{
    PlayerShowBase player = 1;
    repeated ScoreData items = 2;
}
message ScoreTopReward
{
    ScoreType topType = 1;
    int32 rank = 2;
    int32 payReturn = 3;    // 充值返还比（提现）
    map<int32, int64> ctReturn = 4; // 货币返还比
    int32 hfqReturn = 5;    // 话费券返还
}
message ScoreTopRewardEx
{
    ScoreType topType = 1;
    repeated ScoreTopReward items = 2;
}
message WithScoreLogItem
{
    int64 time = 1;
    int64 uid = 2;
    int64 id = 3;
    ScoreType scoreType = 4;
    int32 amount = 5;   // 元
    int32 remain = 6;
    int32 state = 7;
}
message HfqRechargeLogItem
{
    int64 time = 1;
    int64 uid = 2;
    int64 id = 3;
    string phone = 4;
    int32 amount = 5;   // 元
    int32 state = 6;
}
message C2SGetIdlePlayers
{     
     int64 guid = 1;     // 搜索指定玩家
}
message PlayerBaseInfo
{
     enum State{
          Offline = 0;  // 离线
          Playing = 1;  // 游戏中
          Idle = 2;     // 空闲中
     };
     int64 guid = 1;
     string name = 2;
     string portraits = 3;
     int32 portBorder = 4;
     int32 level = 5;
     int32 gender = 6;
     State state = 7;
}
message S2CGetIdlePlayers
{
     repeated PlayerBaseInfo items = 1;
     int64 guid= 2; // 指定玩家返回 (>0)
}
message C2SInvitePlay
{
     int64 guid = 1;    //值<=0时 一键邀请，其它为指定玩家GUID
}
message InviteTarget
{
     int32 gsId = 1; // 游戏服ID
     int64 id = 2;    // 房间ID || 匹配ID
     int32 game = 3;
     bool isTable = 4; // 是否房间（房间中 || 匹配中）
}
// 邀请通知
message S2CInviteNotify
{
     InviteTarget target = 1;
     int64 inviterConnId = 2;     
     string playerName = 10; // 邀请者
     string gameName = 11;
}
// 被邀请玩家回复通知
message C2SInviteNotify
{
     InviteTarget target = 1;
     int64 inviterConnId = 2;     
     bool agree = 3;
}
message S2CInviteRefuse
{
     string playerName = 1;
}
message S2CSeason
{
     SeasonCfg season = 1;
     double rankPercent = 2; // 超过 %
}
// 请求赛季排行榜
message C2SSeasonRankList
{
     int64 areaId = 1;   // 地域ID 
}
message S2CSeasonRankList
{
     int32 gameCat = 1;
     int64 areaId = 2;
     repeated SeasonRankItem items = 3;
}
// 领取段位奖励
message C2SGetDuanWeiReward
{
     int32 duanWei = 1;
}
message S2CGetDuanWeiReward
{
     int32 duanWei = 1; 
     bool ok = 2; 
}
// 领取赛季奖励
message C2SGetSeasonReward
{
     int32 gameCat = 1;
}
message S2CGetSeasonReward
{
     bool ok = 1;
}
// 段位变化通知
message S2CDuanWeiChange
{
     int32 gameCat = 1;
     int32 oldDuanWei = 2;
     int32 newDuanWei = 3;
}
// 段位重置通知
message S2CDuanWeiReset
{
     int32 gameCat = 1;
     int32 oldDuanWei = 2;
     int32 newDuanWei = 3;
}
message DuanWeiRewardCfg
{
	int32 id = 1;		// ID
	int32 gameCat = 2;	// 玩法类型
	int32 level = 3;	// 段位等级
	string name = 4; // 段位称号	
	int64 needScore = 5;// 所需积分
	map<int32, int64> reward = 6;// 段位奖励
	string descript = 7;
     int32 protect = 8;  // 保护
     int32 inherit = 9;  // 继承
     string scoreDesc = 10;
     int32 diTuIcon = 11;
     int32 dengJiIcon = 12;
}
// 请求段位配置
message C2SGetSeasonDuanWeiCfg
{
     int32 gameCat = 1;
}
message S2CGetSeasonDuanWeiCfg
{
     int32 gameCat = 1;
     repeated DuanWeiRewardCfg items = 2;
}
// 请求赛季奖励配置
message C2SGetSeasonRewardCfg
{
     int32 gameCat = 1;
}
message S2CGetSeasonRewardCfg
{
     int32 gameCat = 1;
     repeated SeasonRewardCfg items = 2;
}
// 请求赛季历史排行
message C2SSeasonHisRankList
{
     int32 gameCat = 1;
}
message S2CSeasonHisRankList
{
     int32 gameCat = 1;
	repeated SeasonRankList datas = 2;
}
enum AreaId
{
    AreaId_Null = 0;
    AreaId_Nation = -1; 
}
enum AreaUnit
{
     AreaUnit_Null = 0;
    AreaUnit_Nation = 1;
    AreaUnit_Province = 2; 
    AreaUnit_City = 3; 
}
enum SeasonState
{
    SeasonState_Null = 0;
    SeasonState_Run = 1; 
    SeasonState_End = 2; 
    SeasonState_Wait = 3;
}
message SeasonCfg
{
     int32 seasonNum = 1;   // 未开始为0
     int64 lastStartTime = 2;
     int64 lastEndTime = 3; 
     int64 startTime = 4;
     int32 duration = 5; 
     int32 interval = 6;
     SeasonState state = 7; 
}
message SeasonRankItem
{
     PlayerShowBase player = 1;
     int32 duanWei = 2;
     int64 score = 3;
     int32 rank = 4;
     int32 playTimes = 5;
     int32 winTimes = 6;     
}
message SeasonRewardCfg
{
     int32 id = 1;			// 
	int32 gameCat = 2;		// 玩法类型
	int32 startRank = 4;		// 排名
     int32 endRank = 5;			// 排名
	map<int32, int64> reward = 6;// 奖励
     string desc = 7;         // 
}
message PlayerSeasonData
{
     int32 seasonNum = 1;
     PlayerShowBase player = 2;
     int64 prov = 3;
     int64 city = 4; 
     int32 gameCat = 5;
     int32 duanWei = 6;
     int64 score = 7;
     int32 playTimes = 8;
     int32 winTimes = 9;
     int32 rank = 10;
}
message SeasonRankListItem
{     
     int64 area = 1;
     repeated PlayerSeasonData items = 2;
}
message SeasonRankList
{
     int32 gameCat = 1;
     int32 seasonNum = 2;
     int64 startTime = 4;
     int64 endTime = 5;
     repeated SeasonRankListItem items = 3;
}
message C2SGetShopItems
{    
}
message CatShopItem{
    string catName = 1;
    repeated ShopItem items = 2;
}
message S2CGetShopItems
{
    repeated CatShopItem catShop = 1;
}
message C2SBuyShopItem
{
    int32 id = 1;
    int32 num = 2;
}
message S2CBuyShopItem
{
    int32 id = 1;
    int32 ec = 2;    
}
message S2CPortFrames 
{
    repeated int32 items = 1;
}
// 设置购买回调
message C2SSetBuyCb
{
    string orderId = 1;  // 对应的订单
    int32 shopId = 2;   // 兑换的商品ID
    int32 num = 3;      // 数量
}
// 取装扮商品列表
message C2SGetZbShopItems
{    
}
message S2CGetZbShopItems
{
    repeated ZbShopItem items = 1;
}
enum BuyCurrencyType
{
    BuyCurrencyType_Null = 0;
    BuyCurrencyType_Rmb = 1;
    BuyCurrencyType_Gem = 2;
    BuyCurrencyType_HuafeiQuan = 3;
    BuyCurrencyType_Advert = 4; // 看广告
    BuyCurrencyType_Share = 5; // 分享
}
enum ShopCat
{
    ShopCat_Null = 0;
    ShopCat_Coin = 1;
    ShopCat_Gem = 2;
    ShopCat_GemExchange = 3;
}
message ShopItem
{
    int32 id = 1;
    string catName = 2;
    int32 catOrder = 3;
    string name = 4;
    int32 itemType = 5;
    int64 amount = 7;
    int64 donateAmount = 8;
    int32 donateTimes = 9;
    BuyCurrencyType ct = 10;
    int32 price = 11;
    bool dayReset = 12;
	int32 dayLimit = 13;
}
message ZbShopSubItem
{    
    int32 shopId = 1;   // 商品id
    int32 expire = 2;   // 过期(天)
    BuyCurrencyType ct = 3;
    int32 price = 4;
}
message ZbShopItem
{
    int32 id = 1;               // 分类ID
    string catName = 2;
    int32 catOrder = 3;
    string name = 4;
    ZbShopSubItem item1 = 5;
    ZbShopSubItem item2 = 6;
    ZbShopSubItem item3 = 7;
}
message S2CShowItems
{
	int32 uid = 4;		// 唯一ID
    repeated Item items = 1;
//	string btnText = 2;//弃用
//	int32 id = 3;//弃用
	AdRewardItem adItem = 5;
}
// 展示确认
message C2SShowItemsReply
{
	int32 uid = 1;
}
message C2SGetShowItems
{	
}
message S2CShowBox
{
    int32 boxType = 1;
    repeated BoxData box = 2;
    PaiMing pmData = 3;
}
message C2SCloseShowBox
{
    int32 adType = 1;
    bool buZaiTiShi = 2;
}
message BoxData
{
    int32 adType =1;
    int32 intParam = 2;
    string strParam = 3;
    repeated Item reward = 4;
    int32 otherParam = 5;
    int32 state = 6;
}
message PaiMing
{
    int32 type = 1;// 1.全国排名  2，今日排名
    int64 orRank = 2;
    int64 curRank = 3;
    string orArea = 4;
    string curArea = 5;
    
    repeated Item reward = 6;
    
    int32 gameCat = 7;
}
enum BoxType
{
    BoxType_Reward = 0;// 直接领取
    BoxType_Notify = 1; //通知弹窗 
}
enum BoxNotifyType
{
    BoxNotifyType_Null = 0;
}
enum BoxFuncType
{
    BoxFuncType_Null = 0;
    BoxFuncType_RenWu = 1;
    BoxFuncType_DuanWeiReward  = 2;
    BoxFuncType_QuanGuoPaiMin = 3;
    BoxFuncType_SeasonReward = 4;
    BoxFuncType_DingShiDengLu = 5;
    BoxFuncType_DengJi = 6;
    BoxFuncType_PaiHangBangReward= 7;
    BoxFuncType_PaiHangBangUpdate= 8;
    BoxFuncType_QianDao= 9;
}
message C2SGetTables
{
     int32 gameType = 1;
}
message CatTable
{
     string catName = 1;
     bool isRecommend = 3;
     repeated TableInfo items = 2;
}
message QuickStart
{
     string catName = 1;
     int32 cfgId = 2;
}
message S2CGetTables
{
     int32 gameType = 1;
     GsCat gsCat = 3;
     repeated CatTable tables = 2;
     QuickStart quick = 4;
}
message C2SMatchTable
{
     int32 gameType = 1;
     int32 tableCfgId = 2;
}
message C2SNextMatch
{
     int32 gameType = 1;
     int32 tableCfgId = 2;
}
message C2SExitMatch
{
}
message S2CExitMatch
{    
}
message C2SJoinTable
{
     int32 tableId = 1;
}
message S2CEnterTable
{
     TablePlayer item = 1;
}
message C2SExitTable
{
}
message S2CExitTable
{
     int64 guid = 1;
}
message S2CMatchUpdate
{
     enum State{
          Normal = 0;    // 常规匹配
          ReadyInvit = 1;     // 准备（可邀请）
          Inviting = 2;       // 邀请阶段
     }
     int32 gameType = 1;
     int32 tableCfgId = 2;
     bool inviteable = 3; // 是否可邀请
     int32 playerCount =4;
    repeated Player players = 10; 
    State state = 11;
    int32 leftSec = 12; 
}
message S2CServiceFee
{
     int32 value = 1;
}
message S2CTablePlayer
{
     TablePlayer player = 1;
}
message C2SReqTableInfo
{
     
}
message S2CGoOnGame
{
     int32 gameCat = 1;
     bytes gameData = 2;
}
message C2SUILoaded
{
}
message TableInfo
{
	int32 gameType = 1;
	string name = 2;
	int32 cfgId = 3;
	string changCiName = 4;
	 int64 radix = 5;
     int32 playerNum = 6;
	 bool inviteable = 7;
	 bool douXiPai = 8;
	 string cond = 9;
	 ValRange recommCurrency = 10;
	 ValRange EnterCurrency = 11;
}
message TablePlayer
{
	 Player player = 1;
	 int32 pos = 2;
	 int64 score = 3;
}
message TableCommon
{
	int32 tableId = 1;
	string catName = 8;
	int32 gameType = 2;
	repeated TablePlayer players = 3;
	CurrencyType ct = 4;
	int32 tablecfgId = 5;
	int32 playerCount = 6;
	int32 tableCat = 7;
	bool inviteable = 9;
}
enum TableMode
{
	TM_Null = 0;	
	TM_Match = 1;	
	TM_Race = 2;	
};
message S2CTipMsg
{
    int32 cfgId = 1;
    repeated string params = 2;
}
message C2STrueNameAuth
{
     string idNum = 1;
     string name = 2;
}
message  S2CTrueNameAuth
{
     int32 result = 1;
}
enum GenderType
{
    Gender_Null = 0;
    Gender_Male = 1;
    Gender_Female = 2;
}
message C2SSetGender
{
     GenderType sex = 1;
}
message S2CSetGender
{
     GenderType sex = 1;
}
message C2SHideMe
{
     bool hide = 1;
}
message S2CHideMe
{
     bool hide = 1;
}
message C2SSetName
{
     string name = 1;
}
enum SetNameResult
{
    SetName_Fail = 0;
    SetName_Ok = 1;
    SetName_Illegal = 2;
}
message S2CSetName
{
     SetNameResult result = 1;
     string name = 2;
}
message C2SSetPortraits
{
     int32 iconId = 1;
}
message S2CSetPortraits
{
     int32 iconId = 1;
}
message C2SSetPortBorder
{
     int32 id = 1;
}
message S2CSetPortBorder
{
     int32 id = 1;
}
message C2SLocat
{
     string data = 1; // json串: "{\"callId\":\"SDK_LBS\",\"latitude\":105.042352,\"longitude\":33.182752,\"altitude\":100.425339}"
}
// 引流奖励领取
message C2SGetYinLiuReward
{     
}
message S2CGetYinLiuReward
{
     int32 ec = 1;
}
message C2SVipCfgs
{
}
message S2CVipCfgs
{
    repeated VipCfg items = 1;
}
// 领取 vip 达成奖励
message C2SGetVipReward
{
    int32 level = 1;    // vip等级
}
message S2CGetVipReward
{
    int32 level = 1;
    int32 ec = 2;
}
// 领取 vip 每日奖励
message C2SGetVipDayReward
{
}
message S2CGetVipDayReward
{
    int32 ec = 1;
}
// VIP变化通知
message S2CVipChange
{
    int32 oldVip = 1;
    int32 newVip = 2;
}
message VipPlayerBase
{
    string name = 1;
    int64 playerGuid = 2;
    int32 portBorder = 3;
    int32 vipLevel = 4;
}
// VIP 登录广播/通知
message S2CVipLogin
{
    VipPlayerBase item = 1;
    InformType inform = 2;
}
enum InformType{
    InformType_Null = 0;
    InformType_Text = 1;    // 文字提示
    InformType_Ani = 2;     // 动画
}
message VipCfg
{
    int32 level = 1;
    int32 payAmount = 2;
    map<int32, int64> dayGift = 3;  // 每日礼包
    map<int32, int64> gift = 4;    // 达成礼包（道具）
    int32 jjjMul = 5;               // 救济金领取倍数
    int32 poChanMul = 6;            // 破产领取倍数
    int32 poChanTimes = 7;            // 破产领取次数
    InformType loginInform = 8;          // 登陆通知
    InformType entryInform = 9;          // 入场通知
    int32 portBorder = 10;           // 专属头像框
    map<int32, int64> decorates = 11;             // 专属装扮 id : 时间
    string desc = 12;               // 描述文本
}
message C2SZaiXianInfo
{
}
message S2CZaiXianInfo
{
    repeated ZaiXianData data = 1;
}
message C2SZaiXianReward
{
    int32 id = 1;
}
message S2CZaiXianReward
{
    int32 id = 1;
    int32 errcode = 2;
}
message ZaiXianData
{
    int32 id = 1;
    string title = 2;
    string time = 3;
    repeated Id2Val reward = 4;
    int32 state = 5;
}
enum ZaiXianRewardState
{
    DSRS_NotInTime = 0;
    DSRS_InTime = 1;
    DSRS_Geted = 2;
}
message C2SZhanJi
{
    int32 tableId = 1;
}
message C2SZhanJiTableInfo
{
}
message S2CZhanJiTableInfo
{
    repeated ZhanJiTable tables = 1;
}
message S2CZhanJi
{
    int32 tableId = 1;
    repeated ZhanJiData zhanJi = 2;
}
message ZhanJiTable
{
    int32 tableId = 1;
    string name = 2;
}
message ZhanJiData
{
    int64 id = 1;
    int32 tableId = 2;
    int32 winLose = 3;
    int64 coin = 4;
    int32 duanWei = 5;
    int64 time = 6;
}
